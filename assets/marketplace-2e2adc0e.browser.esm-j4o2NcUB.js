const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-BdgVNXf3.js","assets/web3-vendor-D-smDdvq.js","assets/react-vendor-oRnAdrvc.js","assets/ui-vendor-DvZrbspg.js","assets/index-afkGx5Ck.css"])))=>i.map(i=>d[i]);
import{_ as t}from"./web3-vendor-D-smDdvq.js";import{a4 as r,H as e,A as a,a5 as i,J as s,a2 as n,a6 as o,B as c,a1 as d,c as p,i as l,a7 as g,a8 as u,T as h,a9 as m,aa as f,y as w,ab as y,ac as W,ad as A,_ as L,ae as v,af as C,ag as P,ah as T}from"./index-BdgVNXf3.js";import{D as k,f as I,I as S,a as b}from"./QueryParams-32a56510.browser.esm-CIeLU7Il.js";import{m as B,v as E,h as O,i as D,a as M}from"./marketplace-e3129e2f.browser.esm-B9VhitKm.js";import{a as q,b as _,G as j,C as G}from"./contract-appuri-5c40af52.browser.esm-Bz6oVDxP.js";import{C as R}from"./contract-interceptor-d7b164a7.browser.esm-Dui4xQZ5.js";import{C as $}from"./contract-platform-fee-e756e68f.browser.esm-CRqOvknr.js";import{C as N}from"./contract-roles-71988d2e.browser.esm-CpZiDLHX.js";import{c as V}from"./cleanCurrencyAddress-ded19cfe.browser.esm-CnKsRlUV.js";import{s as F}from"./setErc20Allowance-7f76f677.browser.esm-DUVYy-Mo.js";import"./react-vendor-oRnAdrvc.js";import"./ui-vendor-DvZrbspg.js";let U=function(t){return t[t.Direct=0]="Direct",t[t.Auction=1]="Auction",t}({});class x{constructor(t,r){this.contractWrapper=t,this.storage=r,this.encoder=new s(t)}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.listingId.toString()!==t.toString())throw new o(this.getAddress(),t.toString());if(r.listingType!==U.Auction)throw new m(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(r)}async getWinningBid(t){await this.validateListing(c.from(t));const r=await this.contractWrapper.read("winningBid",[t]);if(r.offeror!==n)return await B(this.contractWrapper.getProvider(),c.from(t),r)}async getWinner(t){const r=await this.validateListing(c.from(t)),e=await this.contractWrapper.read("winningBid",[t]),a=c.from(Math.floor(Date.now()/1e3)),i=c.from(r.endTimeInEpochSeconds);if(a.gt(i)&&e.offeror!==n)return e.offeror;const s=new G(this.contractWrapper),o=(await s.getEvents("AuctionClosed")).find((r=>r.data.listingId.eq(c.from(t))));if(!o)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return o.data.winningBidder}createListing=p((async t=>{E(t);const r=await w(t.assetContractAddress),e=await w(t.currencyContractAddress);await O(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await y(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e),i=await y(this.contractWrapper.getProvider(),t.reservePricePerToken,e);let s=Math.floor(t.startTimestamp.getTime()/1e3);const n=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;s<n&&(s=n);const o=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:V(e),listingType:U.Auction,quantityToList:t.quantity,reservePricePerToken:i,secondsUntilEndTime:t.listingDurationInSeconds,startTime:c.from(s)}],parse:t=>({id:this.contractWrapper.parseLogs("ListingAdded",t?.logs)[0].args.listingId,receipt:t})});return o.setGasLimitMultiple(1.2),o}));createListingsBatch=p((async t=>{const r=(await Promise.all(t.map((t=>this.createListing.prepare(t))))).map((t=>t.encode())),e=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:t=>this.contractWrapper.parseLogs("ListingAdded",t?.logs).map((r=>({id:r.args.listingId,receipt:t})))});return e.setGasLimitMultiple(1.2),e}));buyoutListing=p((async t=>{const r=await this.validateListing(c.from(t)),e=await v(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,C(r.buyoutPrice,e.decimals))}));makeBid=p((async(t,r)=>{const e=await this.validateListing(c.from(t)),a=await y(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(c.from(0)))throw new Error("Cannot make a bid with 0 value");const i=await this.contractWrapper.read("bidBufferBps",[]),s=await this.getWinningBid(t);if(s){const t=M(s.pricePerToken,a,i);l(t)}else{const t=a,r=c.from(e.reservePrice);l(t.gte(r))}const n=c.from(e.quantity),o=a.mul(n),d=await this.contractWrapper.getCallOverrides()||{};await F(this.contractWrapper,o,e.currencyContractAddress,d);const p=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,e.quantity,e.currencyContractAddress,a,W],overrides:d});return p.setGasLimitMultiple(1.2),p}));cancelListing=p((async t=>{const r=await this.validateListing(c.from(t)),e=c.from(Math.floor(Date.now()/1e3)),a=c.from(r.startTimeInEpochSeconds),i=await this.contractWrapper.read("winningBid",[t]);if(e.gt(a)&&i.offeror!==n)throw new P(t.toString());const s=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[c.from(t),await this.contractWrapper.getSignerAddress()]});return s.setGasLimitMultiple(1.2),s}));closeListing=p((async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateListing(c.from(t));try{const e=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[c.from(t),r]});return e.setGasLimitMultiple(1.2),e}catch(a){throw a.message.includes("cannot close auction before it has ended")?new T(t.toString(),e.endTimeInEpochSeconds.toString()):a}}));executeSale=p((async t=>{const r=await this.validateListing(c.from(t));try{const e=await this.getWinningBid(t);l(e,"No winning bid found");const a=this.encoder.encode("closeAuction",[t,r.sellerAddress]),i=this.encoder.encode("closeAuction",[t,e.buyerAddress]),s=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a,i]});return s.setGasLimitMultiple(1.2),s}catch(e){throw e.message.includes("cannot close auction before it has ended")?new T(t.toString(),r.endTimeInEpochSeconds.toString()):e}}));updateListing=p((async t=>{const r=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds]});return r.setGasLimitMultiple(1.2),r}));async getBidBufferBps(){return this.contractWrapper.read("bidBufferBps",[])}async getMinimumNextBid(t){const[r,e,a]=await Promise.all([this.getBidBufferBps(),this.getWinningBid(t),this.validateListing(c.from(t))]),i=e?e.currencyValue.value:a.reservePrice,s=i.add(i.mul(r).div(1e4));return A(this.contractWrapper.getProvider(),a.currencyContractAddress,s)}async validateListing(t){try{return await this.getListing(t)}catch(r){throw r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:c.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await A(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await I(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await A(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:c.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:U.Auction}}}class Y{constructor(t,r){this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.assetContract===n)throw new o(this.getAddress(),t.toString());if(r.listingType!==U.Direct)throw new m(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(r)}async getActiveOffer(t,r){await this.validateListing(c.from(t)),l(f(r));const e=await this.contractWrapper.read("offers",[t,await w(r)]);if(e.offeror!==n)return await B(this.contractWrapper.getProvider(),c.from(t),e)}createListing=p((async t=>{E(t);const r=await w(t.assetContractAddress),e=await w(t.currencyContractAddress);await O(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await y(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e);let i=Math.floor(t.startTimestamp.getTime()/1e3);const s=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;i<s&&(i=s);const n=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:V(e),listingType:U.Direct,quantityToList:t.quantity,reservePricePerToken:a,secondsUntilEndTime:t.listingDurationInSeconds,startTime:c.from(i)}],parse:t=>({id:this.contractWrapper.parseLogs("ListingAdded",t?.logs)[0].args.listingId,receipt:t})});return n.setGasLimitMultiple(1.2),n}));createListingsBatch=p((async t=>{const r=(await Promise.all(t.map((t=>this.createListing.prepare(t))))).map((t=>t.encode())),e=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:t=>this.contractWrapper.parseLogs("ListingAdded",t?.logs).map((r=>({id:r.args.listingId,receipt:t})))});return e.setGasLimitMultiple(1.2),e}));makeOffer=p((async(t,r,e,a,i)=>{if(u(e))throw new Error("You must use the wrapped native token address when making an offer with a native token");const s=await y(this.contractWrapper.getProvider(),a,e);try{await this.getListing(t)}catch(g){throw new Error(`Error getting the listing with id ${t}`)}const n=c.from(r),o=c.from(s).mul(n),d=await this.contractWrapper.getCallOverrides()||{};await F(this.contractWrapper,o,e,d);let p=W;i&&(p=c.from(Math.floor(i.getTime()/1e3)));const l=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,r,e,s,p],overrides:d});return l.setGasLimitMultiple(1.2),l}));acceptOffer=p((async(t,r)=>{await this.validateListing(c.from(t));const e=await w(r),a=await this.contractWrapper.read("offers",[t,e]),i=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t,e,a.currency,a.pricePerToken]});return i.setGasLimitMultiple(1.2),i}));buyoutListing=p((async(t,r,e)=>{const a=await this.validateListing(c.from(t)),{valid:i,error:s}=await this.isStillValidListing(a,r);if(!i)throw new Error(`Listing ${t} is no longer valid. ${s}`);const n=e||await this.contractWrapper.getSignerAddress(),o=c.from(r),d=c.from(a.buyoutPrice).mul(o),p=await this.contractWrapper.getCallOverrides()||{};await F(this.contractWrapper,d,a.currencyContractAddress,p);const l=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buy",args:[t,n,o,a.currencyContractAddress,d],overrides:p});return l.setGasLimitMultiple(1.2),l}));updateListing=p((async t=>{const r=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,await w(t.currencyContractAddress),t.startTimeInSeconds,t.secondsUntilEnd]});return r.setGasLimitMultiple(1.2),r}));cancelListing=p((async t=>{const r=h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelDirectListing",args:[t]});return r.setGasLimitMultiple(1.2),r}));async validateListing(t){try{return await this.getListing(t)}catch(r){throw r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:c.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await A(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await I(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:U.Direct}}async isStillValidListing(r,e){if(!(await D(this.contractWrapper.getProvider(),this.getAddress(),r.assetContractAddress,r.tokenId,r.sellerAddress)))return{valid:!1,error:`Token '${r.tokenId}' from contract '${r.assetContractAddress}' is not approved for transfer`};const a=this.contractWrapper.getProvider(),i=(await t((async()=>{const{default:t}=await import("./IERC165-ODxXmlQV.js");return{default:t}}),[])).default,s=new L(r.assetContractAddress,i,a),n=await s.supportsInterface(S),o=await s.supportsInterface(b);if(n){const e=(await t((async()=>{const{default:t}=await import("./index-BdgVNXf3.js").then((t=>t.dW));return{default:t}}),__vite__mapDeps([0,1,2,3,4]))).default,i=new L(r.assetContractAddress,e,a);let s;try{s=await i.ownerOf(r.tokenId)}catch(c){}const n=s?.toLowerCase()===r.sellerAddress.toLowerCase();return{valid:n,error:n?void 0:`Seller is not the owner of Token '${r.tokenId}' from contract '${r.assetContractAddress} anymore'`}}if(o){const i=(await t((async()=>{const{default:t}=await import("./index-BdgVNXf3.js").then((t=>t.dY));return{default:t}}),__vite__mapDeps([0,1,2,3,4]))).default,s=new L(r.assetContractAddress,i,a),n=(await s.balanceOf(r.sellerAddress,r.tokenId)).gte(e||r.quantity);return{valid:n,error:n?void 0:`Seller does not have enough balance of Token '${r.tokenId}' from contract '${r.assetContractAddress} to fulfill the listing`}}return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}}class H{static contractRoles=r;get chainId(){return this._chainId}constructor(t,r,n){let o=arguments.length>4?arguments[4]:void 0,c=arguments.length>5?arguments[5]:void 0,d=arguments.length>6&&void 0!==arguments[6]?arguments[6]:new e(t,r,o,arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},n);this._chainId=c,this.abi=a.parse(o||[]),this.contractWrapper=d,this.storage=n,this.metadata=new q(this.contractWrapper,i,this.storage),this.app=new _(this.contractWrapper,this.metadata,this.storage),this.roles=new N(this.contractWrapper,H.contractRoles),this.encoder=new s(this.contractWrapper),this.estimator=new j(this.contractWrapper),this.direct=new Y(this.contractWrapper,this.storage),this.auction=new x(this.contractWrapper,this.storage),this.events=new G(this.contractWrapper),this.platformFees=new $(this.contractWrapper),this.interceptor=new R(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.assetContract===n)throw new o(this.getAddress(),t.toString());switch(r.listingType){case U.Auction:return await this.auction.mapListing(r);case U.Direct:return await this.direct.mapListing(r);default:throw new Error(`Unknown listing type: ${r.listingType}`)}}async getActiveListings(t){const r=await this.getAllListingsNoFilter(!0),e=this.applyFilter(r,t),a=c.from(Math.floor(Date.now()/1e3));return e.filter((t=>t.type===U.Auction&&c.from(t.endTimeInEpochSeconds).gt(a)&&c.from(t.startTimeInEpochSeconds).lte(a)||t.type===U.Direct&&c.from(t.quantity).gt(0)))}async getAllListings(t){const r=await this.getAllListingsNoFilter(!1);return this.applyFilter(r,t)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.read("totalListings",[])}async isRestrictedToListerRoleOnly(){return!(await this.contractWrapper.read("hasRole",[d("lister"),n]))}async getBidBufferBps(){return this.contractWrapper.read("bidBufferBps",[])}async getTimeBufferInSeconds(){return this.contractWrapper.read("timeBuffer",[])}async getOffers(t){const r=await this.events.getEvents("NewOffer",{order:"desc",filters:{listingId:t}});return await Promise.all(r.map((r=>B(this.contractWrapper.getProvider(),c.from(t),{quantityWanted:r.data.quantityWanted,pricePerToken:r.data.quantityWanted.gt(0)?r.data.totalOfferAmount.div(r.data.quantityWanted):r.data.totalOfferAmount,currency:r.data.currency,offeror:r.data.offeror}))))}buyoutListing=p((async(t,r,e)=>{const a=await this.contractWrapper.read("listings",[t]);if(a.listingId.toString()!==t.toString())throw new o(this.getAddress(),t.toString());switch(a.listingType){case U.Direct:return l(void 0!==r),await this.direct.buyoutListing.prepare(t,r,e);case U.Auction:return await this.auction.buyoutListing.prepare(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}));makeOffer=p((async(t,r,e)=>{const a=await this.contractWrapper.read("listings",[t]);if(a.listingId.toString()!==t.toString())throw new o(this.getAddress(),t.toString());const i=await this.contractWrapper.getChainID();switch(a.listingType){case U.Direct:return l(e),await this.direct.makeOffer.prepare(t,e,u(a.currency)?g[i].wrapped.address:a.currency,r);case U.Auction:return await this.auction.makeBid.prepare(t,r);default:throw Error(`Unknown listing type: ${a.listingType}`)}}));setBidBufferBps=p((async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getTimeBufferInSeconds();return h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[r,c.from(t)]})}));setTimeBufferInSeconds=p((async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getBidBufferBps();return h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[c.from(t),r]})}));allowListingFromSpecificAssetOnly=p((async t=>{const r=[];return(await this.roles.get("asset")).includes(n)&&r.push(this.encoder.encode("revokeRole",[d("asset"),n])),r.push(this.encoder.encode("grantRole",[d("asset"),t])),h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r]})}));allowListingFromAnyAsset=p((async()=>{const t=[],r=await this.roles.get("asset");for(const e in r)t.push(this.encoder.encode("revokeRole",[d("asset"),e]));return t.push(this.encoder.encode("grantRole",[d("asset"),n])),h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[t]})}));async getAllListingsNoFilter(t){return(await Promise.all(Array.from(Array((await this.contractWrapper.read("totalListings",[])).toNumber()).keys()).map((async r=>{let e;try{e=await this.getListing(r)}catch(a){return}if(e.type===U.Auction)return e;if(t){const{valid:t}=await this.direct.isStillValidListing(e);if(!t)return}return e})))).filter((t=>void 0!==t))}applyFilter(t,r){let e=[...t];const a=c.from(r?.start||0).toNumber(),i=c.from(r?.count||k).toNumber();return r&&(r.seller&&(e=e.filter((t=>t.sellerAddress.toString().toLowerCase()===r?.seller?.toString().toLowerCase()))),r.tokenContract&&(e=e.filter((t=>t.assetContractAddress.toString().toLowerCase()===r?.tokenContract?.toString().toLowerCase()))),void 0!==r.tokenId&&(e=e.filter((t=>t.tokenId.toString()===r?.tokenId?.toString()))),e=e.filter(((t,r)=>r>=a)),e=e.slice(0,i)),e}async prepare(t,r,e){return h.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}}export{H as Marketplace};
//# sourceMappingURL=marketplace-2e2adc0e.browser.esm-j4o2NcUB.js.map
