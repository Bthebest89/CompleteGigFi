import{D as r}from"./QueryParams-32a56510.browser.esm-CIeLU7Il.js";import{$ as t,H as e,A as a,an as s,J as o,ao as n,B as c,a1 as i,a2 as p,c as m,T as l}from"./index-BdgVNXf3.js";import{a as h,b as d,G as u,C as w}from"./contract-appuri-5c40af52.browser.esm-Bz6oVDxP.js";import{C as f}from"./contract-interceptor-d7b164a7.browser.esm-Dui4xQZ5.js";import{C as b,D as y,a as W}from"./contract-owner-49e75547.browser.esm-_SCqISV8.js";import{C as g}from"./contract-platform-fee-e756e68f.browser.esm-CRqOvknr.js";import{C as v}from"./contract-roles-71988d2e.browser.esm-CpZiDLHX.js";import{C as j}from"./contract-sales-918c7cb8.browser.esm-DBh2PU1o.js";import{D as A}from"./drop-claim-conditions-e6f2abbf.browser.esm-DUin9XFx.js";import{S as C}from"./erc-721-standard-4c4125d2.browser.esm-CwkY8p4N.js";import{P as T}from"./thirdweb-checkout-f6974aaf.browser.esm-BEBBIyQl.js";import"./web3-vendor-D-smDdvq.js";import"./setErc20Allowance-7f76f677.browser.esm-DUVYy-Mo.js";import"./react-vendor-oRnAdrvc.js";import"./ui-vendor-DvZrbspg.js";import"./index-voFwA1yT.js";import"./treeify-PLB7ybit.js";import"./assertEnabled-d1700f0b.browser.esm-C0-eUoBY.js";import"./erc-721-27306550.browser.esm-BS-g0s5y.js";class k extends C{static contractRoles=t;constructor(r,t,c){let i=arguments.length>4?arguments[4]:void 0,p=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new e(r,t,i,arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},c),c,p),this.abi=a.parse(i||[]),this.metadata=new h(this.contractWrapper,s,this.storage),this.app=new d(this.contractWrapper,this.metadata,this.storage),this.roles=new v(this.contractWrapper,k.contractRoles),this.royalties=new b(this.contractWrapper,this.metadata),this.sales=new j(this.contractWrapper),this.claimConditions=new A(this.contractWrapper,this.metadata,this.storage),this.encoder=new o(this.contractWrapper),this.estimator=new u(this.contractWrapper),this.events=new w(this.contractWrapper),this.platformFees=new g(this.contractWrapper),this.revealer=new y(this.contractWrapper,this.storage,n.name,(()=>this.erc721.nextTokenIdToMint())),this.interceptor=new f(this.contractWrapper),this.owner=new W(this.contractWrapper),this.checkout=new T(this.contractWrapper)}onNetworkUpdated(r){this.contractWrapper.updateSignerOrProvider(r)}getAddress(){return this.contractWrapper.address}async totalSupply(){const[r,t]=await Promise.all([this.totalClaimedSupply(),this.totalUnclaimedSupply()]);return r.add(t)}async getAllClaimed(t){const e=c.from(t?.start||0).toNumber(),a=c.from(t?.count||r).toNumber(),s=Math.min((await this.contractWrapper.read("nextTokenIdToClaim",[])).toNumber(),e+a);return await Promise.all(Array.from(Array(s).keys()).map((r=>this.get(r.toString()))))}async getAllUnclaimed(t){const e=c.from(t?.start||0).toNumber(),a=c.from(t?.count||r).toNumber(),s=c.from(Math.max((await this.contractWrapper.read("nextTokenIdToClaim",[])).toNumber(),e)),o=c.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint",[])).toNumber(),s.toNumber()+a));return await Promise.all(Array.from(Array(o.sub(s).toNumber()).keys()).map((r=>this.erc721.getTokenMetadata(s.add(r).toString()))))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!(await this.contractWrapper.read("hasRole",[i("transfer"),p]))}createBatch=m((async(r,t)=>this.erc721.lazyMint.prepare(r,t)));async getClaimTransaction(r,t){let e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.erc721.getClaimTransaction(r,t,{checkERC20Allowance:e})}claimTo=m((()=>{var r=this;return async function(t,e){let a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return r.erc721.claimTo.prepare(t,e,{checkERC20Allowance:a})}})());claim=m((()=>{var r=this;return async function(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return r.claimTo.prepare(await r.contractWrapper.getSignerAddress(),t,e)}})());burn=m((async r=>this.erc721.burn.prepare(r)));async get(r){return this.erc721.get(r)}async ownerOf(r){return this.erc721.ownerOf(r)}async balanceOf(r){return this.erc721.balanceOf(r)}async balance(){return this.erc721.balance()}async isApproved(r,t){return this.erc721.isApproved(r,t)}transfer=m((async(r,t)=>this.erc721.transfer.prepare(r,t)));setApprovalForAll=m((async(r,t)=>this.erc721.setApprovalForAll.prepare(r,t)));setApprovalForToken=m((async(r,t)=>l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[r,t]})));async prepare(r,t,e){return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:r,args:t,overrides:e})}async call(r,t,e){return this.contractWrapper.call(r,t,e)}}export{k as NFTDrop};
//# sourceMappingURL=nft-drop-ee9ded99.browser.esm-B8gSynz7.js.map
