import{dv as e,dw as t,dx as r,dy as s,dz as i,dA as n,dB as o,dC as c,dD as h,dE as a,dF as d,dG as u,dH as m,dI as p,cu as l}from"./index-BdgVNXf3.js";import"./web3-vendor-D-smDdvq.js";import"./react-vendor-oRnAdrvc.js";import"./ui-vendor-DvZrbspg.js";class g{constructor(e,t=100){this.sendBatchFn=e,this.maxBatchSize=t,this.pendingBatch=[]}enqueueRequest(e){return u(this,void 0,void 0,(function*(){const t={request:e,resolve:void 0,reject:void 0},r=new Promise(((e,r)=>{t.resolve=e,t.reject=r}));return this.pendingBatch.push(t),this.pendingBatch.length===this.maxBatchSize?this.sendBatchRequest():this.pendingBatchTimer||(this.pendingBatchTimer=setTimeout((()=>this.sendBatchRequest()),10)),r}))}sendBatchRequest(){return u(this,void 0,void 0,(function*(){const e=this.pendingBatch;this.pendingBatch=[],this.pendingBatchTimer&&(clearTimeout(this.pendingBatchTimer),this.pendingBatchTimer=void 0);const t=e.map((e=>e.request));return this.sendBatchFn(t).then((t=>{e.forEach(((e,r)=>{const s=t[r];if(s.error){const t=new Error(s.error.message);t.code=s.error.code,t.data=s.error.data,e.reject(t)}else e.resolve(s.result)}))}),(t=>{e.forEach((e=>{e.reject(t)}))}))}))}}class f extends e{constructor(e){const r=f.getApiKey(e.apiKey),s=f.getAlchemyNetwork(e.network);let i=f.getAlchemyConnectionInfo(s,r,"http");void 0!==e.url&&(i.url=e.url),i.throttleLimit=e.maxRetries,e.connectionInfoOverrides&&(i=Object.assign(Object.assign({},i),e.connectionInfoOverrides));super(i,t[s]),this.apiKey=e.apiKey,this.maxRetries=e.maxRetries,this.batchRequests=e.batchRequests;const n=Object.assign(Object.assign({},this.connection),{headers:Object.assign(Object.assign({},this.connection.headers),{"Alchemy-Ethers-Sdk-Method":"batchSend"})});this.batcher=new g((e=>l(n,JSON.stringify(e)))),this.modifyFormatter()}static getApiKey(e){if(null==e)return r;if(e&&"string"!=typeof e)throw new Error(`Invalid apiKey '${e}' provided. apiKey must be a string.`);return e}static getNetwork(e){return"string"==typeof e&&e in s?s[e]:i(e)}static getAlchemyNetwork(e){if(void 0===e)return n;if("number"==typeof e)throw new Error(`Invalid network '${e}' provided. Network must be a string.`);if(!Object.values(o).includes(e))throw new Error(`Invalid network '${e}' provided. Network must be one of: ${Object.values(o).join(", ")}.`);return e}static getAlchemyConnectionInfo(e,t,r){const s="http"===r?c(e,t):h(e,t);return{headers:d?{"Alchemy-Ethers-Sdk-Version":a}:{"Alchemy-Ethers-Sdk-Version":a,"Accept-Encoding":"gzip"},allowGzip:!0,url:s}}detectNetwork(){const e=Object.create(null,{detectNetwork:{get:()=>super.detectNetwork}});return u(this,void 0,void 0,(function*(){let t=this.network;if(null==t&&(t=yield e.detectNetwork.call(this),!t))throw new Error("No network detected");return t}))}_startPending(){m("WARNING: Alchemy Provider does not support pending filters")}isCommunityResource(){return this.apiKey===r}send(e,t){return this._send(e,t,"send")}_send(e,t,r,s=!1){const i={method:e,params:t,id:this._nextId++,jsonrpc:"2.0"};if(Object.assign({},this.connection).headers["Alchemy-Ethers-Sdk-Method"]=r,this.batchRequests||s)return this.batcher.enqueueRequest(i);this.emit("debug",{action:"request",request:p(i),provider:this});const n=["eth_chainId","eth_blockNumber"].indexOf(e)>=0;if(n&&this._cache[e])return this._cache[e];const o=l(this.connection,JSON.stringify(i),v).then((e=>(this.emit("debug",{action:"response",request:i,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",error:e,request:i,provider:this}),e}));return n&&(this._cache[e]=o,setTimeout((()=>{this._cache[e]=null}),0)),o}modifyFormatter(){this.formatter.formats.receiptLog.removed=e=>{if("boolean"==typeof e)return e}}}function v(e){if(e.error){const t=new Error(e.error.message);throw t.code=e.error.code,t.data=e.error.data,t}return e.result}export{f as AlchemyProvider};
//# sourceMappingURL=alchemy-provider-6749bff8-BBx-E4YY.js.map
