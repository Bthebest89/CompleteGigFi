{"version":3,"file":"erc-1155-standard-a5888d37.browser.esm-B3tIwJFG.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-a5888d37.browser.esm.js"],"sourcesContent":["import { f as buildTransactionFunction } from './transactions-72f9603c.browser.esm.js';\nimport { E as Erc1155 } from './erc-1155-7ce9bee1.browser.esm.js';\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns The total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Transfer multiple NFTs\n   * \n   * @remarks Transfer multiple NFTs from the connected wallet to another wallet.\n   * \n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFTs to\n   * const toAddress = \"{{wallet_address}}\";\n   * // Array of token IDs of the NFTs you want to send\n   * const tokenIds = [\"0\", \"1\", \"2\"];\n   * // Array of amounts of the NFTs you want to send\n   * const amounts = [1, 2, 3];\n   * await contract.transferBatch(toAddress, tokenIds, amounts);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (to, tokenIds, amounts, fromAddress) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      return _this2.erc1155.transferBatch.prepare(to, tokenIds, amounts, fromAddress, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this3 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this3.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\n    };\n  })());\n}\n\nexport { StandardErc1155 as S };\n"],"names":["StandardErc1155","chainId","this","_chainId","constructor","contractWrapper","storage","erc1155","Erc1155","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","get","tokenId","totalSupply","balanceOf","balance","isApproved","operator","transfer","buildTransactionFunction","_this","async","to","amount","data","arguments","length","undefined","prepare","transferBatch","_this2","tokenIds","amounts","fromAddress","setApprovalForAll","approved","airdrop","_this3","addresses"],"mappings":"wGAaA,MAAMA,EACJ,WAAIC,GACF,OAAOC,KAAKC,QAChB,CACE,WAAAC,CAAYC,EAAiBC,EAASL,GACpCC,KAAKG,gBAAkBA,EACvBH,KAAKI,QAAUA,EACfJ,KAAKK,QAAU,IAAIC,EAAQN,KAAKG,gBAAiBH,KAAKI,QAASL,GAC/DC,KAAKC,SAAWF,CACpB,CAKE,gBAAAQ,CAAiBC,GACfR,KAAKG,gBAAgBM,uBAAuBD,EAChD,CACE,UAAAE,GACE,OAAOV,KAAKG,gBAAgBQ,OAChC,CAcE,SAAMC,CAAIC,GACR,OAAOb,KAAKK,QAAQO,IAAIC,EAC5B,CAOE,iBAAMC,CAAYD,GAChB,OAAOb,KAAKK,QAAQS,YAAYD,EACpC,CAeE,eAAME,CAAUJ,EAASE,GACvB,OAAOb,KAAKK,QAAQU,UAAUJ,EAASE,EAC3C,CAKE,aAAMG,CAAQH,GACZ,OAAOb,KAAKK,QAAQW,QAAQH,EAChC,CAOE,gBAAMI,CAAWN,EAASO,GACxB,OAAOlB,KAAKK,QAAQY,WAAWN,EAASO,EAC5C,CAgBEC,SAA0BC,EAAyB,MACjD,IAAIC,EAAQrB,KACZ,OAAOsB,eAAgBC,EAAIV,EAASW,GAClC,IAAIC,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,GAChF,OAAOL,EAAMhB,QAAQc,SAASU,QAAQN,EAAIV,EAASW,EAAQC,EAC5D,CACF,EANkD,IAwBnDK,cAA+BV,EAAyB,MACtD,IAAIW,EAAS/B,KACb,OAAOsB,eAAgBC,EAAIS,EAAUC,EAASC,GAC5C,IAAIT,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,GAChF,OAAOK,EAAO1B,QAAQyB,cAAcD,QAAQN,EAAIS,EAAUC,EAASC,EAAaT,EACjF,CACF,EANuD,IAexDU,kBAAmCf,GAAyBE,MAAOJ,EAAUkB,IACpEpC,KAAKK,QAAQ8B,kBAAkBN,QAAQX,EAAUkB,KAiC1DC,QAAyBjB,EAAyB,MAChD,IAAIkB,EAAStC,KACb,OAAOsB,eAAgBT,EAAS0B,EAAWL,GACzC,IAAIT,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,GAChF,OAAOY,EAAOjC,QAAQgC,QAAQR,QAAQhB,EAAS0B,EAAWL,EAAaT,EACxE,CACF,EANiD","x_google_ignoreList":[0]}