{"version":3,"mappings":";yZAAA,IAAIA,EAAwB,SAAUA,GAIpC,OAHAA,EAASA,EAAkB,QAAI,GAAK,UACpCA,EAASA,EAAc,IAAI,GAAK,MAChCA,EAASA,EAAkB,QAAI,GAAK,UAC7BA,CACT,CAL4B,CAK1B,ICwFF,MAAMC,EAKJ,WAAIC,GACF,OAAOC,KAAKC,QAChB,CACE,WAAAC,CAAYC,EAASC,EAASC,GAC5B,IACIC,EAAMC,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAC5CV,EAAUQ,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAChDC,EAAkBH,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,IAAII,EAAgBR,EAASC,EAASE,EAHlHC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAE,EAG0DF,GAC9IL,KAAKC,SAAWF,EAChBC,KAAKM,IAAMM,EAAUC,MAAMP,GAAO,IAClCN,KAAKU,gBAAkBA,EACvBV,KAAKK,QAAUA,EACfL,KAAKc,SAAW,IAAIC,EAAiBf,KAAKU,gBAAiBM,EAAoBhB,KAAKK,SACpFL,KAAKiB,IAAM,IAAIC,EAAelB,KAAKU,gBAAiBV,KAAKc,SAAUd,KAAKK,SACxEL,KAAKmB,QAAU,IAAIC,EAAgBpB,KAAKU,iBACxCV,KAAKqB,UAAY,IAAIC,EAAiBtB,KAAKU,iBAC3CV,KAAKuB,OAAS,IAAIC,EAAexB,KAAKU,iBACtCV,KAAKyB,YAAc,IAAIC,EAAoB1B,KAAKU,gBACpD,CACE,gBAAAiB,CAAiBxB,GACfH,KAAKU,gBAAgBkB,uBAAuBzB,EAChD,CACE,UAAA0B,GACE,OAAO7B,KAAKU,gBAAgBN,OAChC,CAYE,SAAM0B,CAAIC,GACR,MACMC,SADYhC,KAAKiC,UACDC,QAAOC,GAAKA,EAAEJ,WAAWK,GAAGC,EAAUC,KAAKP,MACjE,GAAyB,IAArBC,EAAUxB,OACZ,MAAM,IAAI+B,MAAM,sBAElB,OAAOP,EAAU,EACrB,CAeE,YAAMC,GACJ,MAAMO,QAAoBxC,KAAKU,gBAAgB+B,KAAK,kBAAmB,KAAQ,GAE/E,aADqBC,QAAQC,IAAIH,EAAWI,KAAIC,GAAQH,QAAQC,IAAI,CAAC3C,KAAKU,gBAAgB+B,KAAK,QAAS,CAACI,EAAKd,aAAc/B,KAAK8C,iBAAiBD,EAAKd,kBACzIa,KAAI,CAACG,EAAMC,KACvB,IAAKC,EAAOC,GAASH,EACrB,MAAMI,EAAOX,EAAWQ,GACxB,MAAO,CACLjB,WAAYoB,EAAKpB,WACjBqB,SAAUD,EAAKC,SACfC,YAAaF,EAAKE,YAClBC,WAAYH,EAAKG,WACjBC,SAAUJ,EAAKI,SACfN,MAAOA,EACPC,MAAOA,EACPM,WAAYL,EAAK,GAAGP,KAAI,CAACa,EAAGC,KAAO,CACjCC,UAAWR,EAAKS,QAAQF,GACxBG,iBAAkBJ,EAClBK,gBAAiBX,EAAKY,UAAUL,OAEnC,GAEP,CAME,sBAAMZ,CAAiBf,GACrB,MAAMmB,QAAclD,KAAKU,gBAAgB+B,KAAK,gBAAiB,CAACV,IAChE,MAAO,CAAC,CACNiC,KAAMnE,EAASoE,QACfC,MAAO,UACPC,MAAOjB,EAAMkB,cACZ,CACDJ,KAAMnE,EAASwE,IACfH,MAAO,MACPC,MAAOjB,EAAMoB,UACZ,CACDN,KAAMnE,EAAS0E,QACfL,MAAO,UACPC,MAAOjB,EAAMsB,cAEnB,CAqBE,cAAMC,CAAS1C,EAAY2C,GAIzB,OAHKA,IACHA,QAAgB1E,KAAKU,gBAAgBiE,oBAEhC3E,KAAKU,gBAAgB+B,KAAK,WAAY,CAACV,QAAkB6C,EAAeF,IACnF,CAkBE,gBAAMG,CAAW9C,SACT/B,KAAK8E,aAAa/C,GACxB,MAAMgD,QAAiB/E,KAAK8B,IAAIC,GAC1BiD,EAAMD,EAASvB,WAAWZ,KAAIT,GAAKA,EAAEwB,YACrCsB,EAASF,EAASvB,WAAWZ,KAAIT,GAAKA,EAAE0B,mBACxCqB,EAAQH,EAASvB,WAAWZ,KAAIT,GAAKA,EAAE2B,kBACvCqB,EAAkBC,EAASL,EAAS1B,aAC1C,IAEE,aADMrD,KAAKU,gBAAgB2E,aAAaC,QAAQN,EAAKC,EAAQC,EAAOC,IAC7D,CACR,CAAC,MAAOI,GACP,OAAO,CACb,CACA,CAOE,aAAMC,GACJ,MAAMA,QAAgBxF,KAAKU,gBAAgB+E,cAAcC,WAAW1F,KAAKU,gBAAgBN,SACzF,MAAO,CACLuF,KAAM,GACNC,OAAQ,GACRC,SAAU,GACVC,MAAON,EACPO,aAAcC,EAAkBR,EAAS,IAE/C,CAQE,oBAAMS,CAAeC,GACnB,MAAMC,SAAkBC,GAAAC,UAAA,MAAAC,QAAAC,SAAAC,OAAO,uBAAkDC,MAAAC,KAAAC,KAAA,OAAAL,QAAAC,EAAA,GAAAK,+BAAGN,QAC9EO,EAAQ,IAAIC,QAAelC,EAAesB,GAAeC,EAAUnG,KAAKU,gBAAgB+E,eAC9F,aAAasB,EAAmB/G,KAAKU,gBAAgB+E,cAAeS,QAAoBW,EAAMG,UAAUhH,KAAKU,gBAAgBN,SACjI,CAQE,kBAAM0E,CAAa/C,GACjB,UACQ/B,KAAKU,gBAAgB+B,KAAK,QAAS,CAACV,GAC3C,CAAC,MAAOwD,GACP,MAAMhD,MAAM,YAAYR,cAC9B,CACA,CAKE,cAAMkF,GACJ,MAAOC,EAAaC,EAAcC,EAAoBC,EAAsBC,SAAgC5E,QAAQC,IAAI,CAAC3C,KAAKU,gBAAgB+B,KAAK,cAAe,IAAKzC,KAAKU,gBAAgB+B,KAAK,eAAgB,IAAKzC,KAAKU,gBAAgB+B,KAAK,QAAS,IAAKzC,KAAKU,gBAAgB+B,KAAK,kBAAmB,IAAKzC,KAAKU,gBAAgB+B,KAAK,oBAAqB,MACzV8E,QAA4BC,EAAsBxH,KAAKU,gBAAgB+E,cAAe2B,GAC5F,MAAO,CACLF,YAAaA,EAAYO,WACzBN,aAAcA,EAAaM,WAC3BL,qBACAG,sBACAF,qBAAsBA,EAAqBI,WAC3CH,uBAAwBA,EAAuBG,WAErD,CAwCEC,QAAyBC,GAAyBtB,MAAOhD,EAAaG,KAC/DA,IACHA,EAAa,CAAC,CACZG,UAAW3D,KAAKU,gBAAgBN,QAChCyD,iBAAkB,EAClBC,gBAAiB,QAGrB,MAAMkB,EAAMxB,EAAWZ,KAAIT,GAAKA,EAAEwB,YAC5BsB,EAASzB,EAAWZ,KAAIT,GAAKA,EAAE0B,mBAC/BqB,EAAQ1B,EAAWZ,KAAIT,GAAKA,EAAE2B,kBACpC,OAAO8D,EAAYC,oBAAoB,CACrCnH,gBAAiBV,KAAKU,gBACtBoH,OAAQ,UACRC,KAAM,CAAC/C,EAAKC,EAAQC,EAAO7B,GAC3BxC,MAAOmH,IAEE,CACLC,GAFYjI,KAAKU,gBAAgBwH,UAAU,kBAAmBF,GAASG,MAE7D,GAAGJ,KAAKhG,WAClBiG,aAGJ,IAuBJI,KAAsBT,EAAyB,MAC7C,IAAIU,EAAQrI,KACZ,OAAOqG,eAAgBtE,EAAYuG,GACjC,IAAIC,EAAShI,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAEjF,aADM8H,EAAMvD,aAAa/C,GAClB6F,EAAYC,oBAAoB,CACrCnH,gBAAiB2H,EAAM3H,gBACvBoH,OAAQ,qBACRC,KAAM,CAAChG,EAAYuG,EAAUC,IAEhC,CACF,EAX8C,IA2B/CjD,QAAyBqC,GAAyBtB,gBAC1CrG,KAAK8E,aAAa/C,GACxB,MAAMgD,QAAiB/E,KAAK8B,IAAIC,GAC1BiD,EAAMD,EAASvB,WAAWZ,KAAIT,GAAKA,EAAEwB,YACrCsB,EAASF,EAASvB,WAAWZ,KAAIT,GAAKA,EAAE0B,mBACxCqB,EAAQH,EAASvB,WAAWZ,KAAIT,GAAKA,EAAE2B,kBACvCqB,EAAkBC,EAASL,EAAS1B,aAC1C,OAAOuE,EAAYC,oBAAoB,CACrCnH,gBAAiBV,KAAKU,gBACtBoH,OAAQ,UACRC,KAAM,CAAC/C,EAAKC,EAAQC,EAAOC,IAC3B,IAMJ,aAAMqD,CAAQV,EAAQC,EAAMU,GAC1B,OAAOb,EAAYC,oBAAoB,CACrCnH,gBAAiBV,KAAKU,gBACtBoH,SACAC,OACAU,aAEN,CAKE,UAAMC,CAAKC,EAAcZ,EAAMU,GAC7B,OAAOzI,KAAKU,gBAAgBgI,KAAKC,EAAcZ,EAAMU,EACzD","names":["VoteType","Vote","chainId","this","_chainId","constructor","network","address","storage","abi","arguments","length","undefined","contractWrapper","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","VoteContractSchema","app","ContractAppURI","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","ContractInterceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","get","proposalId","proposals","getAll","filter","p","eq","BigNumber","from","Error","_proposals","read","Promise","all","map","item","getProposalVotes","_ref","index","state","votes","data","proposer","description","startBlock","endBlock","executions","c","i","toAddress","targets","nativeTokenValue","transactionData","calldatas","type","Against","label","count","againstVotes","For","forVotes","Abstain","abstainVotes","hasVoted","account","getSignerAddress","resolveAddress","canExecute","ensureExists","proposal","tos","values","datas","descriptionHash","utils.id","callStatic","execute","e","balance","getProvider","getBalance","name","symbol","decimals","value","displayValue","utils.formatUnits","balanceOfToken","tokenAddress","ERC20Abi","__vitePreload","async","default","__vite_default__","import","then","n","dV","__VITE_PRELOAD__","erc20","Contract","fetchCurrencyValue","balanceOf","settings","votingDelay","votingPeriod","votingTokenAddress","votingQuorumFraction","proposalTokenThreshold","votingTokenMetadata","fetchCurrencyMetadata","toString","propose","buildTransactionFunction","Transaction","fromContractWrapper","method","args","receipt","id","parseLogs","logs","vote","_this","voteType","reason","prepare","overrides","call","functionName"],"ignoreList":[0,1],"sources":["../../node_modules/@thirdweb-dev/sdk/dist/Vote-3b66775c.browser.esm.js","../../node_modules/@thirdweb-dev/sdk/dist/vote-e5646e80.browser.esm.js"],"sourcesContent":["let VoteType = /*#__PURE__*/function (VoteType) {\n  VoteType[VoteType[\"Against\"] = 0] = \"Against\";\n  VoteType[VoteType[\"For\"] = 1] = \"For\";\n  VoteType[VoteType[\"Abstain\"] = 2] = \"Abstain\";\n  return VoteType;\n}({});\n\nexport { VoteType as V };\n","import { BigNumber, utils, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue, f as fetchCurrencyMetadata } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { cs as ContractWrapper, bj as AbiSchema, cp as VoteContractSchema, aL as resolveAddress } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-5c40af52.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers for this\nclass Vote {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns  The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns  All the proposals in the contract.\n   */\n  async getAll() {\n    const _proposals = (await this.contractWrapper.read(\"getAllProposals\", [])) ?? [];\n    const _items = await Promise.all(_proposals.map(item => Promise.all([this.contractWrapper.read(\"state\", [item.proposalId]), this.getProposalVotes(item.proposalId)])));\n    return _items.map((_ref, index) => {\n      let [state, votes] = _ref;\n      const data = _proposals[index];\n      return {\n        proposalId: data.proposalId,\n        proposer: data.proposer,\n        description: data.description,\n        startBlock: data.startBlock,\n        endBlock: data.endBlock,\n        state: state,\n        votes: votes,\n        executions: data[3].map((c, i) => ({\n          toAddress: data.targets[i],\n          nativeTokenValue: c,\n          transactionData: data.calldatas[i]\n        }))\n      };\n    });\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.read(\"proposalVotes\", [proposalId]);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns  True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.read(\"hasVoted\", [proposalId, await resolveAddress(account)]);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns  True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns  The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.getProvider().getBalance(this.contractWrapper.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns  The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(await resolveAddress(tokenAddress), ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.read(\"state\", [proposalId]);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.read(\"votingDelay\", []), this.contractWrapper.read(\"votingPeriod\", []), this.contractWrapper.read(\"token\", []), this.contractWrapper.read(\"quorumNumerator\", []), this.contractWrapper.read(\"proposalThreshold\", [])]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to set up in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns  The id of the created proposal and the transaction receipt.\n   */\n  propose = /* @__PURE__ */buildTransactionFunction(async (description, executions) => {\n    if (!executions) {\n      executions = [{\n        toAddress: this.contractWrapper.address,\n        nativeTokenValue: 0,\n        transactionData: \"0x\"\n      }];\n    }\n    const tos = executions.map(p => p.toAddress);\n    const values = executions.map(p => p.nativeTokenValue);\n    const datas = executions.map(p => p.transactionData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"propose\",\n      args: [tos, values, datas, description],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n        return {\n          id: event[0].args.proposalId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  vote = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (proposalId, voteType) {\n      let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      await _this.ensureExists(proposalId);\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"castVoteWithReason\",\n        args: [proposalId, voteType, reason]\n      });\n    };\n  })());\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  execute = /* @__PURE__ */buildTransactionFunction(async proposalId => {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"execute\",\n      args: [tos, values, datas, descriptionHash]\n    });\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Vote };\n"],"file":"assets/vote-e5646e80.browser.esm-BtHAkAkJ.js"}