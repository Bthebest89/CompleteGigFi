{"version":3,"file":"erc-20-standard-1e9d9631.browser.esm-D3iZln4M.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-1e9d9631.browser.esm.js"],"sourcesContent":["import { f as buildTransactionFunction } from './transactions-72f9603c.browser.esm.js';\nimport { E as Erc20 } from './erc-20-9a18a51c.browser.esm.js';\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.transfer.prepare(to, amount);\n  });\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return this.erc20.transferFrom.prepare(from, to, amount);\n  });\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return this.erc20.setAllowance.prepare(spender, amount);\n  });\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.transferBatch.prepare(args);\n  });\n}\n\nexport { StandardErc20 as S };\n"],"names":["StandardErc20","chainId","this","_chainId","constructor","contractWrapper","storage","erc20","Erc20","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","get","balance","balanceOf","totalSupply","allowance","spender","allowanceOf","owner","transfer","buildTransactionFunction","async","to","amount","prepare","transferFrom","from","setAllowance","transferBatch","args"],"mappings":"sGAaA,MAAMA,EACJ,WAAIC,GACF,OAAOC,KAAKC,QAChB,CACE,WAAAC,CAAYC,EAAiBC,EAASL,GACpCC,KAAKG,gBAAkBA,EACvBH,KAAKI,QAAUA,EACfJ,KAAKK,MAAQ,IAAIC,EAAMN,KAAKG,gBAAiBH,KAAKI,QAASL,GAC3DC,KAAKC,SAAWF,CACpB,CAKE,gBAAAQ,CAAiBC,GACfR,KAAKG,gBAAgBM,uBAAuBD,EAChD,CAKE,UAAAE,GACE,OAAOV,KAAKG,gBAAgBQ,OAChC,CAeE,SAAMC,GACJ,OAAOZ,KAAKK,MAAMO,KACtB,CAcE,aAAMC,GACJ,aAAab,KAAKK,MAAMQ,SAC5B,CAgBE,eAAMC,CAAUH,GACd,OAAOX,KAAKK,MAAMS,UAAUH,EAChC,CAUE,iBAAMI,GACJ,aAAaf,KAAKK,MAAMU,aAC5B,CAgBE,eAAMC,CAAUC,GACd,aAAajB,KAAKK,MAAMW,UAAUC,EACtC,CAkBE,iBAAMC,CAAYC,EAAOF,GACvB,aAAajB,KAAKK,MAAMa,YAAYC,EAAOF,EAC/C,CAoBEG,SAA0BC,GAAyBC,MAAOC,EAAIC,IACrDxB,KAAKK,MAAMe,SAASK,QAAQF,EAAIC,KAoBzCE,aAA8BL,GAAyBC,MAAOK,EAAMJ,EAAIC,IAC/DxB,KAAKK,MAAMqB,aAAaD,QAAQE,EAAMJ,EAAIC,KAenDI,aAA8BP,GAAyBC,MAAOL,EAASO,IAC9DxB,KAAKK,MAAMuB,aAAaH,QAAQR,EAASO,KAyBlDK,cAA+BR,GAAyBC,SAC/CtB,KAAKK,MAAMwB,cAAcJ,QAAQK","x_google_ignoreList":[0]}