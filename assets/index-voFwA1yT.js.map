{"version":3,"mappings":"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","names":["Base","print","this","bufferIndexOf","array","element","arguments","length","undefined","binarySearch","Buffer","compare","linearSearch","buffer1","buffer2","equals","compareFunction","start","end","mid","Math","floor","ordering","i","eqChecker","bufferify","value","isBuffer","words","from","toString","convertWordsToBuffer","isHexString","replace","Uint8Array","buffer","s","ArrayBuffer","isView","byteOffset","byteLength","bigNumberify","startsWith","BigInt","u8a","hex","Array","map","byte","padStart","join","uint8ArrayToBigInt","Error","v","test","tree","bufferToHex","withPrefix","alloc","bufferifyFn","f","arrayBuffer","hexString","parseInt","substring","hexStringToArrayBuffer","hexResult","uint8View","arrayBufferToHexString","log2","n","zip","a","b","e","hexZeroPad","hexStr","Base$1","wordArray","MerkleTree","duplicateOdd","concatenator","concat","hashLeaves","isBitcoinTree","leaves","layers","sortLeaves","sortPairs","sort","fillDefaultHash","complete","constructor","hashFn","options","super","idx","processLeaves","getOptions","pow","ceil","push","createHashes","nodes","layerIndex","layerLimit","Number","isInteger","slice","data","hash","reverse","left","right","combined","addLeaf","leaf","addLeaves","getLeaves","values","isArray","filter","getLeaf","index","getLeafIndex","target","getLeafCount","getHexLeaves","marshalLeaves","JSON","stringify","unmarshalLeaves","jsonStr","parsed","parse","Object","getLayers","getHexLayers","reduce","acc","item","layer","getLayersFlat","unshift","getHexLayersFlat","getLayerCount","getRoot","getHexRoot","getProof","proof","isRightNode","pairIndex","position","getHexProof","getProofs","proofs","getProofsDFS","currentLayer","pushed","leftchildIndex","rightchildIndex","splice","getHexProofs","getPositionalHexProof","getProofIndices","treeIndices","depth","leafCount","maximalIndices","Set","x","add","y","redundantIndices","has","includes","getProofIndicesForUnevenTree","sortedLeafIndices","leavesCount","unevenLayers","proofIndices","layerNodes","proofNodeIndices","unevenLayer","find","_ref","getMultiProof","indices","isUnevenTree","every","getMultiProofForUnevenTree","els","ids","el","hashes","nextIds","j","pairElement","getPairNode","self","indexOf","proofHashes","currentLayerIndices","treeLayer","siblings","uniqueIndices","getHexMultiProof","getProofFlags","_proofs","tested","flags","ids_","proofUsed","verify","targetNode","root","node","isLeftNode","buffers","verifyMultiProof","proofLeaves","verifyMultiProofForUnevenTree","proofitem","indexqueue","keys","hasOwnProperty","call","pair","verifyMultiProofWithFlags","proofFlag","leavesLen","totalHashes","leafPos","hashPos","proofPos","computedRoot","calculateRootForUnevenTree","getDepth","getLayersAsObject","objs","arr","obj","shift","akey","bkey","resetTree","pairIdx","toTreeString","asTree","treeLayers","isPowOf2","leafIndices","leafHashes","totalLeavesCount","leafTuples","_ref2","_ref3","indexA","indexB","leafTupleIndices","_ref4","nextSliceStart","proofTuplesByLayers","sliceStart","_ref5","_ref6","_ref7","_ref8","layerIndex_","parentIndices","parentLayer","parentNodeTreeIndex","bufA","bufB","getRandomValues","rnds8","rng","crypto","bind","byteToHex","native","randomUUID","v4","buf","offset","rnds","random","unsafeStringify","abstractContractModelToLegacy","model","startTimestamp","maxClaimableSupply","supplyClaimed","merkleRoot","pricePerToken","currency","quantityLimitPerTransaction","maxClaimablePerWallet","waitTimeInSecondsBetweenClaims","abstractContractModelToNew","quantityLimitPerWallet","metadata","convertQuantityToBigNumber","quantity","tokenDecimals","constants.MaxUint256","utils.parseUnits","async","parseSnapshotInputs","inputs","chunkSize","chunks","_","results","parsedChunks","Promise","all","chunk","SnapshotInputSchema","parseAsync","SnapshotFormatVersion","ShardedMerkleTree","storage","baseUri","originalEntriesUri","shardNybbles","shards","trees","fromUri","uri","shardedMerkleTreeInfo","downloadJSON","isShardedMerkleTree","fromShardedMerkleTreeInfo","info","hashEntry","entry","currencyDecimals","snapshotFormatVersion","V1","utils.solidityKeccak256","address","maxClaimable","V2","price","currencyAddress","constants.AddressZero","fetchAndCacheDecimals","cache","provider","fetchCurrencyMetadata","decimals","buildAndUpload","snapshotInput","snapshotEntry","shard","toLowerCase","currencyDecimalMap","subTrees","entries","utils.keccak256","roots","fromEntries","shardsToUpload","shardId","name","uris","uploadBatch","lastIndexOf","upload","shardedMerkleInfo","endsWith","hashedEntries","SnapshotEntryWithProofSchema","getAllEntries","fetchSnapshotEntryForAddress","merkleMetadata","snapshotUri","raw","merkleTree","snapshotData","SnapshotSchema","claims","c","legacyContractModelToAbstract","newContractModelToAbstract","approveErc20Allowance","contractToApprove","signer","getSigner","getProvider","ERC20Abi","import","then","dV","default","__vite_default__","__VITE_PRELOAD__","erc20","ContractWrapper","owner","getSignerAddress","spender","allowance","read","totalPrice","BigNumber","mul","div","lt","sendTransaction","prepareClaim","addressToClaim","activeClaimCondition","merkleMetadataFetcher","contractWrapper","checkERC20Allowance","utils.hexZeroPad","priceInProof","currencyAddressInProof","merkleRootHash","normalizePriceValue","message","overrides","getCallOverrides","gt","isNativeToken","CurrencySchema","z","object","string","symbol","number","CurrencyValueSchema","extend","BigNumberSchema","displayValue","ClaimConditionMetadataSchema","optional","catchall","unknown","ClaimConditionInputSchema","startTime","StartDateSchema","NATIVE_TOKEN_ADDRESS","AmountSchema","QuantitySchema","waitInSeconds","BigNumberishSchema","BytesLikeSchema","snapshot","nullable","ClaimConditionInputArray","ClaimConditionOutputSchema","availableSupply","currentMintSupply","currencyMetadata","transform","Date","toNumber","processSnapshotData","claimConditionInputs","snapshotInfos","inputsWithSnapshots","conditionInput","snapshotInfo","input","addresses","size","DuplicateLeafsError","createSnapshot","processClaimConditionInputs","parsedInputs","sortedConditions","metadataOrUri","convertToContractModel","eq","fetchSnapshot","smt","claim","convertToReadableQuantity","bn","utils.formatUnits","transformResultToClaimCondition","pm","shouldDownloadSnapshot","cv","fetchCurrencyValue","sub","resolvedMetadata","updateExistingClaimConditions","claimConditionInput","existingConditions","priceDecimals","priceInWei","priceInTokens","newConditionParsed","mergedConditionOutput","existingOutput","newConditionAtIndex","formattedPrice","ClaimEligibility","resolveOrGenerateId","requestUId","utils.hexlify","utils.toUtf8Bytes","BaseSignaturePayloadInput","to","AddressOrEnsSchema","refine","AddressSchema","mintStartTime","mintEndTime","EndDateSchema","uid","arg","primarySaleRecipient","Signature20PayloadInput","Signature20PayloadOutput","Signature721PayloadInput","NFTInputOrUriSchema","royaltyRecipient","royaltyBps","BasisPointsSchema","Signature721PayloadOutput","Signature1155PayloadInput","Signature1155PayloadInputWithTokenId","tokenId","Signature1155PayloadOutput","Signature721WithQuantityInput","Signature721WithQuantityOutput","MintRequest20","type","MintRequest721","MintRequest1155","MintRequest721withQuantity","equal","RegExp","source","valueOf","prototype","key"],"ignoreList":[0,1,2,3,4,5,6],"sources":["../../node_modules/@thirdweb-dev/merkletree/dist/thirdweb-dev-merkletree.esm.js","../../node_modules/@thirdweb-dev/sdk/node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/@thirdweb-dev/sdk/node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/@thirdweb-dev/sdk/node_modules/uuid/dist/esm-browser/native.js","../../node_modules/@thirdweb-dev/sdk/node_modules/uuid/dist/esm-browser/v4.js","../../node_modules/@thirdweb-dev/sdk/dist/signature-d3ea643d.browser.esm.js","../../node_modules/fast-deep-equal/index.js"],"sourcesContent":["import { Buffer } from 'buffer';\nimport reverse from 'buffer-reverse';\nimport { asTree } from 'treeify';\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\nclass Base {\n  /**\n   * print\n   * @desc Prints out a visual representation of the merkle tree.\n   * @example\n   *```js\n   *tree.print()\n   *```\n   */\n  print() {\n    Base.print(this);\n  }\n\n  /**\n   * bufferIndexOf\n   * @desc Returns the first index of which given buffer is found in array.\n   * @param {Buffer[]} haystack - Array of buffers.\n   * @param {Buffer} needle - Buffer to find.\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.bufferIndexOf(haystack, needle)\n   *```\n   */\n  bufferIndexOf(array, element) {\n    let isSorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (isSorted) {\n      return this.binarySearch(array, element, Buffer.compare);\n    }\n    const eqChecker = (buffer1, buffer2) => buffer1.equals(buffer2);\n    return this.linearSearch(array, element, eqChecker);\n  }\n\n  /**\n   * binarySearch\n   * @desc Returns the first index of which given item is found in array using binary search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} compareFunction\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = MerkleTree.binarySearch(array, element, Buffer.compare)\n   *```\n   */\n  static binarySearch(array, element, compareFunction) {\n    let start = 0;\n    let end = array.length - 1;\n\n    // Iterate while start not meets end\n    while (start <= end) {\n      // Find the mid index\n      const mid = Math.floor((start + end) / 2);\n\n      // Check if the mid value is greater than, equal to, or less than search element.\n      const ordering = compareFunction(array[mid], element);\n\n      // If element is present at mid, start iterating for searching first appearance.\n      if (ordering === 0) {\n        // Linear reverse iteration until the first matching item index is found.\n        for (let i = mid - 1; i >= 0; i--) {\n          if (compareFunction(array[i], element) === 0) {\n            continue;\n          }\n          return i + 1;\n        }\n        return 0;\n      } /* Else look in left or right half accordingly */else if (ordering < 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * binarySearch\n   * @desc Returns the first index of which given item is found in array using binary search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} compareFunction\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.binarySearch(array, element, Buffer.compare)\n   *```\n   */\n  binarySearch(array, element, compareFunction) {\n    return Base.binarySearch(array, element, compareFunction);\n  }\n\n  /**\n   * linearSearch\n   * @desc Returns the first index of which given item is found in array using linear search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} eqChecker\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = MerkleTree.linearSearch(array, element, (a, b) => a === b)\n   *```\n   */\n  static linearSearch(array, element, eqChecker) {\n    for (let i = 0; i < array.length; i++) {\n      if (eqChecker(array[i], element)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * linearSearch\n   * @desc Returns the first index of which given item is found in array using linear search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} eqChecker\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.linearSearch(array, element, (a, b) => a === b)\n   *```\n   */\n  linearSearch(array, element, eqChecker) {\n    return Base.linearSearch(array, element, eqChecker);\n  }\n\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer|ArrayBuffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = MerkleTree.bufferify('0x1234')\n   *```\n   */\n  static bufferify(value) {\n    if (!Buffer.isBuffer(value)) {\n      // crypto-js support\n      if (typeof value === \"object\" && value.words) {\n        return Buffer.from(value.toString(convertWordsToBuffer), \"hex\");\n      } else if (Base.isHexString(value)) {\n        return Buffer.from(value.replace(/^0x/, \"\"), \"hex\");\n      } else if (typeof value === \"string\") {\n        return Buffer.from(value);\n      } else if (typeof value === \"bigint\") {\n        return Buffer.from(value.toString(16), \"hex\");\n      } else if (value instanceof Uint8Array) {\n        return Buffer.from(value.buffer);\n      } else if (typeof value === \"number\") {\n        let s = value.toString();\n        if (s.length % 2) {\n          s = `0${s}`;\n        }\n        return Buffer.from(s, \"hex\");\n      } else if (ArrayBuffer.isView(value)) {\n        return Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n      }\n    }\n    return value;\n  }\n  bigNumberify(value) {\n    return Base.bigNumberify(value);\n  }\n  static bigNumberify(value) {\n    if (typeof value === \"bigint\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      if (value.startsWith(\"0x\") && Base.isHexString(value)) {\n        return BigInt(\"0x\" + value.replace(\"0x\", \"\").toString());\n      }\n      return BigInt(value);\n    }\n    if (Buffer.isBuffer(value)) {\n      return BigInt(\"0x\" + value.toString(\"hex\"));\n    }\n    if (value instanceof Uint8Array) {\n      return uint8ArrayToBigInt(value);\n    }\n    if (typeof value === \"number\") {\n      return BigInt(value);\n    }\n    throw new Error(\"cannot bigNumberify\");\n  }\n\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n  static isHexString(v) {\n    return typeof v === \"string\" && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n  }\n\n  /**\n   * print\n   * @desc Prints out a visual representation of the given merkle tree.\n   * @param {Object} tree - Merkle tree instance.\n   * @return {String}\n   * @example\n   *```js\n   *MerkleTree.print(tree)\n   *```\n   */\n  static print(tree) {\n    console.log(tree.toString());\n  }\n\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = tree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n  bufferToHex(value) {\n    let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Base.bufferToHex(value, withPrefix);\n  }\n\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n  static bufferToHex(value) {\n    let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return `${withPrefix ? \"0x\" : \"\"}${(value || Buffer.alloc(0)).toString(\"hex\")}`;\n  }\n\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = tree.bufferify('0x1234')\n   *```\n   */\n  bufferify(value) {\n    return Base.bufferify(value);\n  }\n\n  /**\n   * bufferifyFn\n   * @desc Returns a function that will bufferify the return value.\n   * @param {Function}\n   * @return {Function}\n   *\n   * @example\n   * ```js\n   *const fn = tree.bufferifyFn((value) => sha256(value))\n   *```\n   */\n  bufferifyFn(f) {\n    return value => {\n      const v = f(value);\n      if (Buffer.isBuffer(v)) {\n        return v;\n      }\n      if (this.isHexString(v)) {\n        return Buffer.from(v.replace(\"0x\", \"\"), \"hex\");\n      }\n      if (typeof v === \"string\") {\n        return Buffer.from(v);\n      }\n      if (typeof v === \"bigint\") {\n        return Buffer.from(value.toString(16), \"hex\");\n      }\n      if (ArrayBuffer.isView(v)) {\n        return Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n      }\n\n      // crypto-js support\n      const arrayBuffer = hexStringToArrayBuffer(value.toString(\"hex\"));\n      // Assuming f now works with ArrayBuffers\n      const processedBuffer = f(arrayBuffer);\n      const hexResult = arrayBufferToHexString(processedBuffer);\n      return Buffer.from(hexResult, \"hex\");\n    };\n  }\n\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n  isHexString(value) {\n    return Base.isHexString(value);\n  }\n\n  /**\n   * log2\n   * @desc Returns the log2 of number.\n   * @param {Number} value\n   * @return {Number}\n   */\n  log2(n) {\n    return n === 1 ? 0 : 1 + this.log2(n / 2 | 0);\n  }\n\n  /**\n   * zip\n   * @desc Returns true if value is a hex string.\n   * @param {String[]|Number[]|Buffer[]} a - first array\n   * @param {String[]|Number[]|Buffer[]} b -  second array\n   * @return {String[][]|Number[][]|Buffer[][]}\n   *\n   * @example\n   * ```js\n   *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n   *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n   *```\n   */\n  zip(a, b) {\n    return a.map((e, i) => [e, b[i]]);\n  }\n  static hexZeroPad(hexStr, length) {\n    return \"0x\" + hexStr.replace(\"0x\", \"\").padStart(length, \"0\");\n  }\n}\nvar Base$1 = Base;\n\n// UTILS\n\n// replaces CryptoJS.enc.Hex\nfunction convertWordsToBuffer(value) {\n  const wordArray = value.words;\n  const arrayBuffer = new ArrayBuffer(wordArray.length * 4); // 4 bytes per word\n  const uint8View = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < wordArray.length; i++) {\n    uint8View[i * 4] = wordArray[i] >> 24 & 0xff;\n    uint8View[i * 4 + 1] = wordArray[i] >> 16 & 0xff;\n    uint8View[i * 4 + 2] = wordArray[i] >> 8 & 0xff;\n    uint8View[i * 4 + 3] = wordArray[i] & 0xff;\n  }\n  return arrayBuffer;\n}\nfunction hexStringToArrayBuffer(hexString) {\n  const buffer = new Uint8Array(hexString.length / 2);\n  for (let i = 0; i < hexString.length; i += 2) {\n    buffer[i / 2] = parseInt(hexString.substring(i, i + 2), 16);\n  }\n  return buffer.buffer;\n}\nfunction arrayBufferToHexString(arrayBuffer) {\n  const uint8View = new Uint8Array(arrayBuffer);\n  return Array.from(uint8View).map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction uint8ArrayToBigInt(u8a) {\n  const hex = Array.from(u8a).map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n  return BigInt(`0x${hex}`);\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\n// TODO: Clean up and DRY up code\n// Disclaimer: The multiproof code is unaudited and may possibly contain serious issues. It's in a hacky state as is and needs to be rewritten.\n\n/**\n * Class reprensenting a Merkle Tree\n * @namespace MerkleTree\n */\nclass MerkleTree extends Base$1 {\n  duplicateOdd = false;\n  concatenator = Buffer.concat;\n  hashLeaves = false;\n  isBitcoinTree = false;\n  leaves = [];\n  layers = [];\n  sortLeaves = false;\n  sortPairs = false;\n  sort = false;\n  fillDefaultHash = null;\n  complete = false;\n\n  /**\n   * @desc Constructs a Merkle Tree.\n   * All nodes and leaves are stored as Buffers.\n   * Lonely leaf nodes are promoted to the next level up without being hashed again.\n   * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.\n   * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes\n   * @param {Object} options - Additional options\n   * @example\n   *```js\n   *const MerkleTree = require('merkletreejs')\n   *const crypto = require('crypto')\n   *\n   *function sha256(data) {\n   *  // returns Buffer\n   *  return crypto.createHash('sha256').update(data).digest()\n   *}\n   *\n   *const leaves = ['a', 'b', 'c'].map(value => keccak(value))\n   *\n   *const tree = new MerkleTree(leaves, sha256)\n   *```\n   */\n  constructor(leaves, hashFn) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    if (options.complete) {\n      if (options.isBitcoinTree) {\n        throw new Error('option \"complete\" is incompatible with \"isBitcoinTree\"');\n      }\n      if (options.duplicateOdd) {\n        throw new Error('option \"complete\" is incompatible with \"duplicateOdd\"');\n      }\n    }\n    this.isBitcoinTree = !!options.isBitcoinTree;\n    this.hashLeaves = !!options.hashLeaves;\n    this.sortLeaves = !!options.sortLeaves;\n    this.sortPairs = !!options.sortPairs;\n    this.complete = !!options.complete;\n    if (options.fillDefaultHash) {\n      if (typeof options.fillDefaultHash === \"function\") {\n        this.fillDefaultHash = options.fillDefaultHash;\n      } else if (Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === \"string\") {\n        this.fillDefaultHash = (idx, hashFn) => options.fillDefaultHash;\n      } else {\n        throw new Error('method \"fillDefaultHash\" must be a function, Buffer, or string');\n      }\n    }\n    this.sort = !!options.sort;\n    if (this.sort) {\n      this.sortLeaves = true;\n      this.sortPairs = true;\n    }\n    this.duplicateOdd = !!options.duplicateOdd;\n    if (options.concatenator) {\n      this.concatenator = options.concatenator;\n    }\n    this.hashFn = this.bufferifyFn(hashFn);\n    this.processLeaves(leaves);\n  }\n  getOptions() {\n    return {\n      complete: this.complete,\n      isBitcoinTree: this.isBitcoinTree,\n      hashLeaves: this.hashLeaves,\n      sortLeaves: this.sortLeaves,\n      sortPairs: this.sortPairs,\n      sort: this.sort,\n      fillDefaultHash: this.fillDefaultHash?.toString() ?? null,\n      duplicateOdd: this.duplicateOdd\n    };\n  }\n  processLeaves(leaves) {\n    if (this.hashLeaves) {\n      leaves = leaves.map(this.hashFn);\n    }\n    this.leaves = leaves.map(this.bufferify);\n    if (this.sortLeaves) {\n      this.leaves = this.leaves.sort(Buffer.compare);\n    }\n    if (this.fillDefaultHash) {\n      for (let i = this.leaves.length; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++) {\n        this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));\n      }\n    }\n    this.createHashes(this.leaves);\n  }\n  createHashes(nodes) {\n    this.layers = [nodes];\n    while (nodes.length > 1) {\n      const layerIndex = this.layers.length;\n      this.layers.push([]);\n      const layerLimit = this.complete && layerIndex === 1 && !Number.isInteger(Math.log2(nodes.length)) ? 2 * nodes.length - 2 ** Math.ceil(Math.log2(nodes.length)) : nodes.length;\n      for (let i = 0; i < nodes.length; i += 2) {\n        if (i >= layerLimit) {\n          this.layers[layerIndex].push(...nodes.slice(layerLimit));\n          break;\n        } else if (i + 1 === nodes.length) {\n          if (nodes.length % 2 === 1) {\n            const data = nodes[nodes.length - 1];\n            let hash = data;\n\n            // is bitcoin tree\n            if (this.isBitcoinTree) {\n              // Bitcoin method of duplicating the odd ending nodes\n              hash = this.hashFn(this.concatenator([reverse(data), reverse(data)]));\n              hash = reverse(this.hashFn(hash));\n              this.layers[layerIndex].push(hash);\n              continue;\n            } else {\n              if (this.duplicateOdd) ; else {\n                // push copy of hash and continue iteration\n                this.layers[layerIndex].push(nodes[i]);\n                continue;\n              }\n            }\n          }\n        }\n        const left = nodes[i];\n        const right = i + 1 === nodes.length ? left : nodes[i + 1];\n        let combined = null;\n        if (this.isBitcoinTree) {\n          combined = [reverse(left), reverse(right)];\n        } else {\n          combined = [left, right];\n        }\n        if (this.sortPairs) {\n          combined.sort(Buffer.compare);\n        }\n        let hash = this.hashFn(this.concatenator(combined));\n\n        // double hash if bitcoin tree\n        if (this.isBitcoinTree) {\n          hash = reverse(this.hashFn(hash));\n        }\n        this.layers[layerIndex].push(hash);\n      }\n      nodes = this.layers[layerIndex];\n    }\n  }\n\n  /**\n   * addLeaf\n   * @desc Adds a leaf to the tree and re-calculates layers.\n   * @param {String|Buffer} - Leaf\n   * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.\n   * @example\n   *```js\n   *tree.addLeaf(newLeaf)\n   *```\n   */\n  addLeaf(leaf) {\n    let shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (shouldHash) {\n      leaf = this.hashFn(leaf);\n    }\n    this.processLeaves(this.leaves.concat(leaf));\n  }\n\n  /**\n   * addLeaves\n   * @desc Adds multiple leaves to the tree and re-calculates layers.\n   * @param {String[]|Buffer[]} - Array of leaves\n   * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.\n   * @example\n   *```js\n   *tree.addLeaves(newLeaves)\n   *```\n   */\n  addLeaves(leaves) {\n    let shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (shouldHash) {\n      leaves = leaves.map(this.hashFn);\n    }\n    this.processLeaves(this.leaves.concat(leaves));\n  }\n\n  /**\n   * getLeaves\n   * @desc Returns array of leaves of Merkle Tree.\n   * @return {Buffer[]}\n   * @example\n   *```js\n   *const leaves = tree.getLeaves()\n   *```\n   */\n  getLeaves(values) {\n    if (Array.isArray(values)) {\n      if (this.hashLeaves) {\n        values = values.map(this.hashFn);\n        if (this.sortLeaves) {\n          values = values.sort(Buffer.compare);\n        }\n      }\n      return this.leaves.filter(\n      // @ts-expect-error - issue from original code\n      leaf => this.bufferIndexOf(values, leaf, this.sortLeaves) !== -1);\n    }\n    return this.leaves;\n  }\n\n  /**\n   * getLeaf\n   * @desc Returns the leaf at the given index.\n   * @param {Number} - Index number\n   * @return {Buffer}\n   * @example\n   *```js\n   *const leaf = tree.getLeaf(1)\n   *```\n   */\n  getLeaf(index) {\n    if (index < 0 || index > this.leaves.length - 1) {\n      return Buffer.from([]);\n    }\n    return this.leaves[index];\n  }\n\n  /**\n   * getLeafIndex\n   * @desc Returns the index of the given leaf, or -1 if the leaf is not found.\n   * @param {String|Buffer} - Target leaf\n   * @return {number}\n   * @example\n   *```js\n   *const leaf = Buffer.from('abc')\n   *const index = tree.getLeafIndex(leaf)\n   *```\n   */\n  getLeafIndex(target) {\n    target = this.bufferify(target);\n    const leaves = this.getLeaves();\n    for (let i = 0; i < leaves.length; i++) {\n      const leaf = leaves[i];\n      if (leaf.equals(target)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * getLeafCount\n   * @desc Returns the total number of leaves.\n   * @return {number}\n   * @example\n   *```js\n   *const count = tree.getLeafCount()\n   *```\n   */\n  getLeafCount() {\n    return this.leaves.length;\n  }\n\n  /**\n   * getHexLeaves\n   * @desc Returns array of leaves of Merkle Tree as hex strings.\n   * @return {String[]}\n   * @example\n   *```js\n   *const leaves = tree.getHexLeaves()\n   *```\n   */\n  getHexLeaves() {\n    return this.leaves.map(leaf => this.bufferToHex(leaf));\n  }\n\n  /**\n   * marshalLeaves\n   * @desc Returns array of leaves of Merkle Tree as a JSON string.\n   * @param {String[]|Buffer[]} - Merkle tree leaves\n   * @return {String} - List of leaves as JSON string\n   * @example\n   *```js\n   *const jsonStr = MerkleTree.marshalLeaves(leaves)\n   *```\n   */\n  static marshalLeaves(leaves) {\n    return JSON.stringify(leaves.map(leaf => MerkleTree.bufferToHex(leaf)), null, 2);\n  }\n\n  /**\n   * unmarshalLeaves\n   * @desc Returns array of leaves of Merkle Tree as a Buffers.\n   * @param {String|Object} - JSON stringified leaves\n   * @return {Buffer[]} - Unmarshalled list of leaves\n   * @example\n   *```js\n   *const leaves = MerkleTree.unmarshalLeaves(jsonStr)\n   *```\n   */\n  static unmarshalLeaves(jsonStr) {\n    let parsed = null;\n    if (typeof jsonStr === \"string\") {\n      parsed = JSON.parse(jsonStr);\n    } else if (jsonStr instanceof Object) {\n      parsed = jsonStr;\n    } else {\n      throw new Error(\"Expected type of string or object\");\n    }\n    if (!parsed) {\n      return [];\n    }\n    if (!Array.isArray(parsed)) {\n      throw new Error(\"Expected JSON string to be array\");\n    }\n    return parsed.map(MerkleTree.bufferify);\n  }\n\n  /**\n   * getLayers\n   * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.\n   * @return {Buffer[][]}\n   * @example\n   *```js\n   *const layers = tree.getLayers()\n   *```\n   */\n  getLayers() {\n    return this.layers;\n  }\n\n  /**\n   * getHexLayers\n   * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.\n   * @return {String[][]}\n   * @example\n   *```js\n   *const layers = tree.getHexLayers()\n   *```\n   */\n  getHexLayers() {\n    return this.layers.reduce((acc, item) => {\n      if (Array.isArray(item)) {\n        acc.push(item.map(layer => this.bufferToHex(layer)));\n      } else {\n        acc.push(item);\n      }\n      return acc;\n    }, []);\n  }\n\n  /**\n   * getLayersFlat\n   * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.\n   * @return {Buffer[]}\n   * @example\n   *```js\n   *const layers = tree.getLayersFlat()\n   *```\n   */\n  getLayersFlat() {\n    const layers = this.layers.reduce((acc, item) => {\n      if (Array.isArray(item)) {\n        acc.unshift(...item);\n      } else {\n        acc.unshift(item);\n      }\n      return acc;\n    }, []);\n    layers.unshift(Buffer.from([0]));\n    return layers;\n  }\n\n  /**\n   * getHexLayersFlat\n   * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.\n   * @return {String[]}\n   * @example\n   *```js\n   *const layers = tree.getHexLayersFlat()\n   *```\n   */\n  getHexLayersFlat() {\n    return this.getLayersFlat().map(layer => this.bufferToHex(layer));\n  }\n\n  /**\n   * getLayerCount\n   * @desc Returns the total number of layers.\n   * @return {number}\n   * @example\n   *```js\n   *const count = tree.getLayerCount()\n   *```\n   */\n  getLayerCount() {\n    return this.getLayers().length;\n  }\n\n  /**\n   * getRoot\n   * @desc Returns the Merkle root hash as a Buffer.\n   * @return {Buffer}\n   * @example\n   *```js\n   *const root = tree.getRoot()\n   *```\n   */\n  getRoot() {\n    if (this.layers.length === 0) {\n      return Buffer.from([]);\n    }\n    return this.layers[this.layers.length - 1][0] || Buffer.from([]);\n  }\n\n  /**\n   * getHexRoot\n   * @desc Returns the Merkle root hash as a hex string.\n   * @return {String}\n   * @example\n   *```js\n   *const root = tree.getHexRoot()\n   *```\n   */\n  getHexRoot() {\n    return this.bufferToHex(this.getRoot());\n  }\n\n  /**\n   * getProof\n   * @desc Returns the proof for a target leaf.\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {Object[]} - Array of objects containing a position property of type string\n   * with values of 'left' or 'right' and a data property of type Buffer.\n   * @example\n   * ```js\n   *const proof = tree.getProof(leaves[2])\n   *```\n   *\n   * @example\n   *```js\n   *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n   *const tree = new MerkleTree(leaves, keccak)\n   *const proof = tree.getProof(leaves[2], 2)\n   *```\n   */\n  getProof(leaf, index) {\n    if (typeof leaf === \"undefined\") {\n      throw new Error(\"leaf is required\");\n    }\n    leaf = this.bufferify(leaf);\n    const proof = [];\n    if (!Number.isInteger(index)) {\n      index = -1;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (Buffer.compare(leaf, this.leaves[i]) === 0) {\n          index = i;\n        }\n      }\n    }\n\n    // @ts-expect-error - issue from original code\n    if (index <= -1) {\n      return [];\n    }\n    for (let i = 0; i < this.layers.length; i++) {\n      const layer = this.layers[i];\n      // @ts-expect-error - issue from original code\n      const isRightNode = index % 2;\n      const pairIndex = isRightNode ?\n      // @ts-expect-error - issue from original code\n      index - 1 : this.isBitcoinTree && index === layer.length - 1 && i < this.layers.length - 1 ?\n      // Proof Generation for Bitcoin Trees\n      index :\n      // Proof Generation for Non-Bitcoin Trees\n      // @ts-expect-error - issue from original code\n      index + 1;\n      if (pairIndex < layer.length) {\n        proof.push({\n          position: isRightNode ? \"left\" : \"right\",\n          data: layer[pairIndex]\n        });\n      }\n\n      // set index to parent index\n      // @ts-expect-error - issue from original code\n      index = index / 2 | 0;\n    }\n\n    // @ts-expect-error - issue from original code\n    return proof;\n  }\n\n  /**\n   * getHexProof\n   * @desc Returns the proof for a target leaf as hex strings.\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {String[]} - Proof array as hex strings.\n   * @example\n   * ```js\n   *const proof = tree.getHexProof(leaves[2])\n   *```\n   */\n  getHexProof(leaf, index) {\n    return this.getProof(leaf, index).map(item => this.bufferToHex(item.data));\n  }\n\n  /**\n   * getProofs\n   * @desc Returns the proofs for all leaves.\n   * @return {Object[]} - Array of objects containing a position property of type string\n   * with values of 'left' or 'right' and a data property of type Buffer for all leaves.\n   * @example\n   * ```js\n   *const proofs = tree.getProofs()\n   *```\n   *\n   * @example\n   *```js\n   *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n   *const tree = new MerkleTree(leaves, keccak)\n   *const proofs = tree.getProofs()\n   *```\n   */\n  getProofs() {\n    // @ts-expect-error - issue from original code\n    const proof = [];\n    // @ts-expect-error - issue from original code\n    const proofs = [];\n\n    // @ts-expect-error - issue from original code\n    this.getProofsDFS(this.layers.length - 1, 0, proof, proofs);\n\n    // @ts-expect-error - issue from original code\n    return proofs;\n  }\n\n  /**\n   * getProofsDFS\n   * @desc Get all proofs through single traverse\n   * @param {Number} currentLayer - Current layer index in traverse.\n   * @param {Number} index - Current tarvese node index in traverse.\n   * @param {Object[]} proof - Proof chain for single leaf.\n   * @param {Object[]} proofs - Proofs for all leaves\n   * @example\n   * ```js\n   *const layers = tree.getLayers()\n   *const index = 0;\n   *let proof = [];\n   *let proofs = [];\n   *const proof = tree.getProofsDFS(layers, index, proof, proofs)\n   *```\n   */\n  // @ts-expect-error - issue from original code\n  getProofsDFS(currentLayer, index, proof, proofs) {\n    const isRightNode = index % 2;\n    if (currentLayer === -1) {\n      if (!isRightNode) {\n        proofs.push([...proof].reverse());\n      }\n      // @ts-expect-error - issue from original code\n      return;\n    }\n    if (index >= this.layers[currentLayer].length) {\n      // @ts-expect-error - issue from original code\n      return;\n    }\n    const layer = this.layers[currentLayer];\n    const pairIndex = isRightNode ? index - 1 : index + 1;\n    let pushed = false;\n    if (pairIndex < layer.length) {\n      pushed = true;\n      proof.push({\n        position: isRightNode ? \"left\" : \"right\",\n        data: layer[pairIndex]\n      });\n    }\n    const leftchildIndex = index * 2;\n    const rightchildIndex = index * 2 + 1;\n    this.getProofsDFS(currentLayer - 1, leftchildIndex, proof, proofs);\n    this.getProofsDFS(currentLayer - 1, rightchildIndex, proof, proofs);\n    if (pushed) {\n      proof.splice(proof.length - 1, 1);\n    }\n  }\n\n  /**\n   * getHexProofs\n   * @desc Returns the proofs for all leaves as hex strings.\n   * @return {String[]} - Proofs array as hex strings.\n   * @example\n   * ```js\n   *const proofs = tree.getHexProofs()\n   *```\n   */\n  getHexProofs() {\n    return this.getProofs().map(item => this.bufferToHex(item.data));\n  }\n\n  /**\n   * getPositionalHexProof\n   * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {(string | number)[][]} - Proof array as hex strings. position at index 0\n   * @example\n   * ```js\n   *const proof = tree.getPositionalHexProof(leaves[2])\n   *```\n   */\n  getPositionalHexProof(leaf, index) {\n    return this.getProof(leaf, index).map(item => {\n      return [item.position === \"left\" ? 0 : 1, this.bufferToHex(item.data)];\n    });\n  }\n\n  /**\n   * getProofIndices\n   * @desc Returns the proof indices for given tree indices.\n   * @param {Number[]} treeIndices - Tree indices\n   * @param {Number} depth - Tree depth; number of layers.\n   * @return {Number[]} - Proof indices\n   * @example\n   * ```js\n   *const proofIndices = tree.getProofIndices([2,5,6], 4)\n   *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]\n   *```\n   */\n  getProofIndices(treeIndices, depth) {\n    const leafCount = 2 ** depth;\n    let maximalIndices = new Set();\n    for (const index of treeIndices) {\n      let x = leafCount + index;\n      while (x > 1) {\n        maximalIndices.add(x ^ 1);\n        x = x / 2 | 0;\n      }\n    }\n    const a = treeIndices.map(index => leafCount + index);\n    const b = Array.from(maximalIndices).sort((x, y) => x - y).reverse();\n    maximalIndices = a.concat(b);\n    const redundantIndices = new Set();\n    const proof = [];\n    for (let index of maximalIndices) {\n      if (!redundantIndices.has(index)) {\n        proof.push(index);\n        while (index > 1) {\n          redundantIndices.add(index);\n          if (!redundantIndices.has(index ^ 1)) {\n            break;\n          }\n          index = index / 2 | 0;\n        }\n      }\n    }\n    return proof.filter(index => {\n      return !treeIndices.includes(index - leafCount);\n    });\n  }\n  getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {\n    const depth = Math.ceil(Math.log2(leavesCount));\n    const unevenLayers = [];\n    for (let index = 0; index < depth; index++) {\n      const unevenLayer = leavesCount % 2 !== 0;\n      if (unevenLayer) {\n        unevenLayers.push({\n          index,\n          leavesCount\n        });\n      }\n      leavesCount = Math.ceil(leavesCount / 2);\n    }\n    const proofIndices = [];\n    let layerNodes = sortedLeafIndices;\n    for (let layerIndex = 0; layerIndex < depth; layerIndex++) {\n      const siblingIndices = layerNodes.map(index => {\n        if (index % 2 === 0) {\n          return index + 1;\n        }\n        return index - 1;\n      });\n      let proofNodeIndices = siblingIndices.filter(index => !layerNodes.includes(index));\n      const unevenLayer = unevenLayers.find(_ref => {\n        let {\n          index\n        } = _ref;\n        return index === layerIndex;\n      });\n      if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {\n        proofNodeIndices = proofNodeIndices.slice(0, -1);\n      }\n      proofIndices.push(proofNodeIndices);\n      layerNodes = [...new Set(layerNodes.map(index => {\n        if (index % 2 === 0) {\n          return index / 2;\n        }\n        if (index % 2 === 0) {\n          return (index + 1) / 2;\n        }\n        return (index - 1) / 2;\n      }))];\n    }\n    return proofIndices;\n  }\n\n  /**\n   * getMultiProof\n   * @desc Returns the multiproof for given tree indices.\n   * @param {Number[]} indices - Tree indices.\n   * @return {Buffer[]} - Multiproofs\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getMultiProof(indices)\n   *```\n   */\n  getMultiProof(tree, indices) {\n    if (!this.complete) {\n      console.warn(\"Warning: For correct multiProofs it's strongly recommended to set complete: true\");\n    }\n    if (!indices) {\n      indices = tree;\n      tree = this.getLayersFlat();\n    }\n    const isUneven = this.isUnevenTree();\n    if (isUneven) {\n      // @ts-expect-error - issue from original code\n      if (indices.every(Number.isInteger)) {\n        return this.getMultiProofForUnevenTree(indices);\n      }\n    }\n    // @ts-expect-error - issue from original code\n    if (!indices.every(Number.isInteger)) {\n      let els = indices;\n      if (this.sortPairs) {\n        // @ts-expect-error - issue from original code\n        els = els.sort(Buffer.compare);\n      }\n\n      // @ts-expect-error - issue from original code\n      let ids = els.map(el => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n      if (!ids.every(idx => idx !== -1)) {\n        throw new Error(\"Element does not exist in Merkle tree\");\n      }\n\n      // @ts-expect-error - issue from original code\n      const hashes = [];\n      const proof = [];\n      let nextIds = [];\n      for (let i = 0; i < this.layers.length; i++) {\n        const layer = this.layers[i];\n        for (let j = 0; j < ids.length; j++) {\n          const idx = ids[j];\n          const pairElement = this.getPairNode(layer, idx);\n          hashes.push(layer[idx]);\n          if (pairElement) {\n            proof.push(pairElement);\n          }\n          nextIds.push(idx / 2 | 0);\n        }\n        ids = nextIds.filter((value, j, self) => self.indexOf(value) === j);\n        nextIds = [];\n      }\n\n      // @ts-expect-error - issue from original code\n      return proof.filter(value => !hashes.includes(value));\n    }\n\n    // @ts-expect-error - issue from original code\n    return this.getProofIndices(indices, Math.log2(tree.length / 2 | 0)).map(\n    // @ts-expect-error - issue from original code\n    index => tree[index]);\n  }\n  getMultiProofForUnevenTree(tree, indices) {\n    if (!indices) {\n      indices = tree;\n      tree = this.getLayers();\n    }\n    let proofHashes = [];\n    // @ts-expect-error - issue from original code\n    let currentLayerIndices = indices;\n    // @ts-expect-error - issue from original code\n    for (const treeLayer of tree) {\n      const siblings = [];\n      for (const index of currentLayerIndices) {\n        if (index % 2 === 0) {\n          const idx = index + 1;\n          if (!currentLayerIndices.includes(idx)) {\n            if (treeLayer[idx]) {\n              siblings.push(treeLayer[idx]);\n              continue;\n            }\n          }\n        }\n        const idx = index - 1;\n        if (!currentLayerIndices.includes(idx)) {\n          if (treeLayer[idx]) {\n            siblings.push(treeLayer[idx]);\n            continue;\n          }\n        }\n      }\n      proofHashes = proofHashes.concat(siblings);\n      const uniqueIndices = new Set();\n      for (const index of currentLayerIndices) {\n        if (index % 2 === 0) {\n          uniqueIndices.add(index / 2);\n          continue;\n        }\n        if (index % 2 === 0) {\n          uniqueIndices.add((index + 1) / 2);\n          continue;\n        }\n        uniqueIndices.add((index - 1) / 2);\n      }\n      currentLayerIndices = Array.from(uniqueIndices);\n    }\n    return proofHashes;\n  }\n\n  /**\n   * getHexMultiProof\n   * @desc Returns the multiproof for given tree indices as hex strings.\n   * @param {Number[]} indices - Tree indices.\n   * @return {String[]} - Multiproofs as hex strings.\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getHexMultiProof(indices)\n   *```\n   */\n  getHexMultiProof(tree, indices) {\n    return this.getMultiProof(tree, indices).map(x => this.bufferToHex(x));\n  }\n\n  /**\n   * getProofFlags\n   * @desc Returns list of booleans where proofs should be used instead of hashing.\n   * Proof flags are used in the Solidity multiproof verifiers.\n   * @param {Number[]|Buffer[]} leaves\n   * @param {Buffer[]} proofs\n   * @return {Boolean[]} - Boolean flags\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getMultiProof(indices)\n   *const proofFlags = tree.getProofFlags(leaves, proof)\n   *```\n   */\n  getProofFlags(leaves, proofs) {\n    if (!Array.isArray(leaves) || leaves.length <= 0) {\n      throw new Error(\"Invalid Inputs!\");\n    }\n    let ids;\n    if (leaves.every(Number.isInteger)) {\n      ids = [...leaves].sort((a, b) => a === b ? 0 : a > b ? 1 : -1); // Indices where passed\n    } else {\n      ids = leaves.map(el => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n    }\n    if (!ids.every(idx => idx !== -1)) {\n      throw new Error(\"Element does not exist in Merkle tree\");\n    }\n    const _proofs = proofs.map(item => this.bufferify(item));\n\n    // @ts-expect-error - issue from original code\n    const tested = [];\n    // @ts-expect-error - issue from original code\n    const flags = [];\n    for (let index = 0; index < this.layers.length; index++) {\n      const layer = this.layers[index];\n      ids = ids.reduce((ids_, idx) => {\n        // @ts-expect-error - issue from original code\n        const skipped = tested.includes(layer[idx]);\n        if (!skipped) {\n          const pairElement = this.getPairNode(layer, idx);\n          const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);\n          // eslint-disable-next-line no-unused-expressions\n          pairElement && flags.push(!proofUsed);\n          tested.push(layer[idx]);\n          tested.push(pairElement);\n        }\n        // @ts-expect-error - issue from original code\n        ids_.push(idx / 2 | 0);\n        return ids_;\n      }, []);\n    }\n\n    // @ts-expect-error - issue from original code\n    return flags;\n  }\n\n  /**\n   * verify\n   * @desc Returns true if the proof path (array of hashes) can connect the target node\n   * to the Merkle root.\n   * @param {Object[]} proof - Array of proof objects that should connect\n   * target node to Merkle root.\n   * @param {Buffer} targetNode - Target node Buffer\n   * @param {Buffer} root - Merkle root Buffer\n   * @return {Boolean}\n   * @example\n   *```js\n   *const root = tree.getRoot()\n   *const proof = tree.getProof(leaves[2])\n   *const verified = tree.verify(proof, leaves[2], root)\n   *```\n   */\n  verify(proof, targetNode, root) {\n    let hash = this.bufferify(targetNode);\n    root = this.bufferify(root);\n    if (!Array.isArray(proof) || !targetNode || !root) {\n      return false;\n    }\n    for (let i = 0; i < proof.length; i++) {\n      const node = proof[i];\n      let data = null;\n      let isLeftNode = null;\n\n      // case for when proof is hex values only\n      if (typeof node === \"string\") {\n        data = this.bufferify(node);\n        isLeftNode = true;\n      } else if (Array.isArray(node)) {\n        isLeftNode = node[0] === 0;\n        data = this.bufferify(node[1]);\n      } else if (Buffer.isBuffer(node)) {\n        data = node;\n        isLeftNode = true;\n      } else if (node instanceof Object) {\n        data = this.bufferify(node.data);\n        isLeftNode = node.position === \"left\";\n      } else {\n        throw new Error(\"Expected node to be of type string or object\");\n      }\n      const buffers = [];\n      if (this.isBitcoinTree) {\n        buffers.push(reverse(hash));\n        buffers[isLeftNode ? \"unshift\" : \"push\"](reverse(data));\n        hash = this.hashFn(this.concatenator(buffers));\n        hash = reverse(this.hashFn(hash));\n      } else {\n        if (this.sortPairs) {\n          if (Buffer.compare(hash, data) === -1) {\n            buffers.push(hash, data);\n            hash = this.hashFn(this.concatenator(buffers));\n          } else {\n            buffers.push(data, hash);\n            hash = this.hashFn(this.concatenator(buffers));\n          }\n        } else {\n          buffers.push(hash);\n          buffers[isLeftNode ? \"unshift\" : \"push\"](data);\n          hash = this.hashFn(this.concatenator(buffers));\n        }\n      }\n    }\n    return Buffer.compare(hash, root) === 0;\n  }\n\n  /**\n   * verifyMultiProof\n   * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.\n   * @param {Buffer} root - Merkle tree root\n   * @param {Number[]} proofIndices - Leave indices for proof\n   * @param {Buffer[]} proofLeaves - Leaf values at indices for proof\n   * @param {Number} leavesCount - Count of original leaves\n   * @param {Buffer[]} proof - Multiproofs given indices\n   * @return {Boolean}\n   * @example\n   *```js\n   *const leaves = tree.getLeaves()\n   *const root = tree.getRoot()\n   *const treeFlat = tree.getLayersFlat()\n   *const leavesCount = leaves.length\n   *const proofIndices = [2, 5, 6]\n   *const proofLeaves = proofIndices.map(i => leaves[i])\n   *const proof = tree.getMultiProof(treeFlat, indices)\n   *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)\n   *```\n   */\n  verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {\n    const isUneven = this.isUnevenTree();\n    if (isUneven) {\n      // TODO: combine these functions and simplify\n      return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);\n    }\n    const depth = Math.ceil(Math.log2(leavesCount));\n    root = this.bufferify(root);\n    proofLeaves = proofLeaves.map(leaf => this.bufferify(leaf));\n    proof = proof.map(leaf => this.bufferify(leaf));\n    const tree = {};\n    for (const [index, leaf] of this.zip(proofIndices, proofLeaves)) {\n      // @ts-expect-error - issue from original code\n      tree[2 ** depth + index] = leaf;\n    }\n    for (const [index, proofitem] of this.zip(this.getProofIndices(proofIndices, depth), proof)) {\n      // @ts-expect-error - issue from original code\n      tree[index] = proofitem;\n    }\n    let indexqueue = Object.keys(tree).map(value => Number(value)).sort((a, b) => a - b);\n    indexqueue = indexqueue.slice(0, indexqueue.length - 1);\n    let i = 0;\n    while (i < indexqueue.length) {\n      const index = indexqueue[i];\n      if (index >= 2 && {}.hasOwnProperty.call(tree, index ^ 1)) {\n        // @ts-expect-error - issue from original code\n        let pair = [tree[index - index % 2], tree[index - index % 2 + 1]];\n        if (this.sortPairs) {\n          pair = pair.sort(Buffer.compare);\n        }\n        const hash = pair[1] ? this.hashFn(this.concatenator(pair)) : pair[0];\n        // @ts-expect-error - issue from original code\n        tree[index / 2 | 0] = hash;\n        indexqueue.push(index / 2 | 0);\n      }\n      i += 1;\n    }\n    return !proofIndices.length ||\n    // @ts-expect-error - issue from original code\n    {}.hasOwnProperty.call(tree, 1) && tree[1].equals(root);\n  }\n  verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {\n    root = this.bufferify(root);\n    leaves = leaves.map(this.bufferify);\n    proofs = proofs.map(this.bufferify);\n    const leavesLen = leaves.length;\n    const totalHashes = proofFlag.length;\n    const hashes = [];\n    let leafPos = 0;\n    let hashPos = 0;\n    let proofPos = 0;\n    for (let i = 0; i < totalHashes; i++) {\n      const bufA = proofFlag[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proofs[proofPos++];\n      const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n      const buffers = [bufA, bufB].sort(Buffer.compare);\n      hashes[i] = this.hashFn(this.concatenator(buffers));\n    }\n    return Buffer.compare(hashes[totalHashes - 1], root) === 0;\n  }\n  verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {\n    root = this.bufferify(root);\n    leaves = leaves.map(leaf => this.bufferify(leaf));\n    proof = proof.map(leaf => this.bufferify(leaf));\n    const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);\n    return root.equals(computedRoot);\n  }\n\n  /**\n   * getDepth\n   * @desc Returns the tree depth (number of layers)\n   * @return {Number}\n   * @example\n   *```js\n   *const depth = tree.getDepth()\n   *```\n   */\n  getDepth() {\n    return this.getLayers().length - 1;\n  }\n\n  /**\n   * getLayersAsObject\n   * @desc Returns the layers as nested objects instead of an array.\n   * @example\n   *```js\n   *const layersObj = tree.getLayersAsObject()\n   *```\n   */\n  getLayersAsObject() {\n    const layers = this.getLayers().map(layer => layer.map(value => this.bufferToHex(value, false)));\n    const objs = [];\n    for (let i = 0; i < layers.length; i++) {\n      const arr = [];\n      for (let j = 0; j < layers[i].length; j++) {\n        const obj = {\n          [layers[i][j]]: null\n        };\n        if (objs.length) {\n          // @ts-expect-error - issue from original code\n          obj[layers[i][j]] = {};\n          const a = objs.shift();\n          // @ts-expect-error - issue from original code\n          const akey = Object.keys(a)[0];\n          // @ts-expect-error - issue from original code\n          obj[layers[i][j]][akey] = a[akey];\n          if (objs.length) {\n            const b = objs.shift();\n            // @ts-expect-error - issue from original code\n            const bkey = Object.keys(b)[0];\n            // @ts-expect-error - issue from original code\n            obj[layers[i][j]][bkey] = b[bkey];\n          }\n        }\n        arr.push(obj);\n      }\n      objs.push(...arr);\n    }\n    return objs[0];\n  }\n\n  /**\n   * resetTree\n   * @desc Resets the tree by clearing the leaves and layers.\n   * @example\n   *```js\n   *tree.resetTree()\n   *```\n   */\n  resetTree() {\n    this.leaves = [];\n    this.layers = [];\n  }\n\n  /**\n   * getPairNode\n   * @desc Returns the node at the index for given layer.\n   * @param {Buffer[]} layer - Tree layer\n   * @param {Number} index - Index at layer.\n   * @return {Buffer} - Node\n   *\n   *@example\n   * ```js\n   *const node = tree.getPairNode(layer, index)\n   *```\n   */\n  getPairNode(layer, idx) {\n    const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n    if (pairIdx < layer.length) {\n      return layer[pairIdx];\n    } else {\n      // @ts-expect-error - issue from original code\n      return null;\n    }\n  }\n\n  /**\n   * toTreeString\n   * @desc Returns a visual representation of the merkle tree as a string.\n   * @return {String}\n   * @example\n   *```js\n   *console.log(tree.toTreeString())\n   *```\n   */\n  toTreeString() {\n    const obj = this.getLayersAsObject();\n    return asTree(obj, true, false);\n  }\n\n  /**\n   * toString\n   * @desc Returns a visual representation of the merkle tree as a string.\n   * @example\n   *```js\n   *console.log(tree.toString())\n   *```\n   */\n  toString() {\n    return this.toTreeString();\n  }\n  isUnevenTree(treeLayers) {\n    const depth = treeLayers?.length || this.getDepth();\n    return !this.isPowOf2(depth);\n  }\n  isPowOf2(v) {\n    return v && !(v & v - 1);\n  }\n  calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {\n    const leafTuples = this.zip(leafIndices, leafHashes).sort((_ref2, _ref3) => {\n      let [indexA] = _ref2;\n      let [indexB] = _ref3;\n      return indexA - indexB;\n    });\n    const leafTupleIndices = leafTuples.map(_ref4 => {\n      let [index] = _ref4;\n      return index;\n    });\n    const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);\n    let nextSliceStart = 0;\n    const proofTuplesByLayers = [];\n    for (let i = 0; i < proofIndices.length; i++) {\n      const indices = proofIndices[i];\n      const sliceStart = nextSliceStart;\n      nextSliceStart += indices.length;\n      proofTuplesByLayers[i] = this.zip(indices, proofHashes.slice(sliceStart, nextSliceStart));\n    }\n    const tree = [leafTuples];\n    for (let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {\n      const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex])\n      // @ts-expect-error - issue from original code\n      .sort((_ref5, _ref6) => {\n        let [indexA] = _ref5;\n        let [indexB] = _ref6;\n        return indexA - indexB;\n      })\n      // @ts-expect-error - issue from original code\n      .map(_ref7 => {\n        let [, hash] = _ref7;\n        return hash;\n      });\n      const s = tree[layerIndex].map(_ref8 => {\n        let [layerIndex_] = _ref8;\n        return layerIndex_;\n      });\n      const parentIndices = [...new Set(s.map(index => {\n        if (index % 2 === 0) {\n          return index / 2;\n        }\n        if (index % 2 === 0) {\n          return (index + 1) / 2;\n        }\n        return (index - 1) / 2;\n      }))];\n      const parentLayer = [];\n      for (let i = 0; i < parentIndices.length; i++) {\n        const parentNodeTreeIndex = parentIndices[i];\n        const bufA = currentLayer[i * 2];\n        const bufB = currentLayer[i * 2 + 1];\n        const hash = bufB ? this.hashFn(this.concatenator([bufA, bufB])) : bufA;\n        parentLayer.push([parentNodeTreeIndex, hash]);\n      }\n      tree.push(parentLayer);\n    }\n    return tree[tree.length - 1][0][1];\n  }\n}\n\nexport { MerkleTree };\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { constants, utils, BigNumber } from 'ethers';\nimport { bM as SnapshotInputSchema, bN as SnapshotEntryWithProofSchema, bO as SnapshotSchema, cs as ContractWrapper, b5 as BigNumberSchema, aV as NATIVE_TOKEN_ADDRESS, cw as AmountSchema, cA as QuantitySchema, b6 as BigNumberishSchema, cB as BytesLikeSchema, s as DuplicateLeafsError, b9 as AddressOrEnsSchema, b8 as AddressSchema, cC as BasisPointsSchema } from './index-33cd3415.browser.esm.js';\nimport { f as fetchCurrencyMetadata, i as isNativeToken, a as fetchCurrencyValue } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-9851c0eb.browser.esm.js';\nimport { MerkleTree } from '@thirdweb-dev/merkletree';\nimport { S as StartDateSchema, E as EndDateSchema } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { z } from 'zod';\nimport { N as NFTInputOrUriSchema } from './setErc20Allowance-7f76f677.browser.esm.js';\nimport { v4 } from 'uuid';\n\nfunction abstractContractModelToLegacy(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerTransaction: model.maxClaimablePerWallet,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims || 0\n  };\n}\n\nfunction abstractContractModelToNew(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerWallet: model.maxClaimablePerWallet,\n    metadata: model.metadata || \"\"\n  };\n}\n\n/**\n * @internal\n * @param quantity - The quantity to convert\n * @param tokenDecimals - The token decimals to use\n */\nfunction convertQuantityToBigNumber(quantity, tokenDecimals) {\n  if (quantity === \"unlimited\") {\n    return constants.MaxUint256;\n  } else {\n    return utils.parseUnits(quantity, tokenDecimals);\n  }\n}\n\nasync function parseSnapshotInputs(inputs) {\n  const chunkSize = 25000;\n  const chunks = Array.from({\n    length: Math.ceil(inputs.length / chunkSize)\n  }, (_, i) => inputs.slice(i * chunkSize, i * chunkSize + chunkSize));\n  const results = [];\n  const parsedChunks = await Promise.all(chunks.map(chunk => SnapshotInputSchema.parseAsync(chunk)));\n  for (const chunk of parsedChunks) {\n    results.push(...chunk);\n  }\n  return results;\n}\n\n// shard using the first 2 hex character of the address\n// this splits the merkle tree into 256 shards\n// shard files will be 00.json, 01.json, 02.json, ..., ff.json\nconst SHARD_NYBBLES = 2;\nlet SnapshotFormatVersion = /*#__PURE__*/function (SnapshotFormatVersion) {\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V1\"] = 1] = \"V1\";\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V2\"] = 2] = \"V2\";\n  return SnapshotFormatVersion;\n}({}); // address, maxClaimable, price, currencyAddress\nclass ShardedMerkleTree {\n  constructor(storage, baseUri, originalEntriesUri, shardNybbles, tokenDecimals) {\n    this.storage = storage;\n    this.shardNybbles = shardNybbles;\n    this.baseUri = baseUri;\n    this.originalEntriesUri = originalEntriesUri;\n    this.tokenDecimals = tokenDecimals;\n    this.shards = {};\n    this.trees = {};\n  }\n  static async fromUri(uri, storage) {\n    try {\n      const shardedMerkleTreeInfo = await storage.downloadJSON(uri);\n      if (shardedMerkleTreeInfo.isShardedMerkleTree) {\n        return ShardedMerkleTree.fromShardedMerkleTreeInfo(shardedMerkleTreeInfo, storage);\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n  static async fromShardedMerkleTreeInfo(info, storage) {\n    return new ShardedMerkleTree(storage, info.baseUri, info.originalEntriesUri, info.shardNybbles, info.tokenDecimals);\n  }\n  static hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion) {\n    switch (snapshotFormatVersion) {\n      case SnapshotFormatVersion.V1:\n        return utils.solidityKeccak256([\"address\", \"uint256\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals)]);\n      case SnapshotFormatVersion.V2:\n        return utils.solidityKeccak256([\"address\", \"uint256\", \"uint256\", \"address\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals), convertQuantityToBigNumber(entry.price || \"unlimited\", currencyDecimals), entry.currencyAddress || constants.AddressZero]);\n    }\n  }\n  static async fetchAndCacheDecimals(cache, provider, currencyAddress) {\n    if (!currencyAddress) {\n      return 18;\n    }\n    // cache decimals for each currency to avoid refetching for every address\n    let currencyDecimals = cache[currencyAddress];\n    if (currencyDecimals === undefined) {\n      const currencyMetadata = await fetchCurrencyMetadata(provider, currencyAddress);\n      currencyDecimals = currencyMetadata.decimals;\n      cache[currencyAddress] = currencyDecimals;\n    }\n    return currencyDecimals;\n  }\n  static async buildAndUpload(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n    let shardNybbles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : SHARD_NYBBLES;\n    const inputs = await parseSnapshotInputs(snapshotInput);\n\n    // TODO Could also derive shardNybbles from input size\n    const shards = {};\n    for (const snapshotEntry of inputs) {\n      const shard = snapshotEntry.address.slice(2, 2 + shardNybbles).toLowerCase();\n      if (shards[shard] === undefined) {\n        shards[shard] = [];\n      }\n      shards[shard].push(snapshotEntry);\n    }\n    const currencyDecimalMap = {};\n    // create shard => subtree root map\n    const subTrees = await Promise.all(Object.entries(shards).map(async _ref => {\n      let [shard, entries] = _ref;\n      return [shard, new MerkleTree(await Promise.all(entries.map(async entry => {\n        // cache decimals for each currency to avoid refetching for every address\n        const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n        return ShardedMerkleTree.hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion);\n      })), utils.keccak256, {\n        sort: true\n      }).getHexRoot()];\n    }));\n    const roots = Object.fromEntries(subTrees);\n    // create master tree from shard => subtree root map\n    const tree = new MerkleTree(Object.values(roots), utils.keccak256, {\n      sort: true\n    });\n    const shardsToUpload = [];\n    for (const [shardId, entries] of Object.entries(shards)) {\n      const data = {\n        proofs: tree.getProof(roots[shardId]).map(value => \"0x\" + value.data.toString(\"hex\")),\n        entries\n      };\n      shardsToUpload.push({\n        data: JSON.stringify(data),\n        name: `${shardId}.json`\n      });\n    }\n    const uris = await storage.uploadBatch(shardsToUpload);\n    const baseUri = uris[0].slice(0, uris[0].lastIndexOf(\"/\"));\n    const originalEntriesUri = await storage.upload(inputs);\n    const shardedMerkleInfo = {\n      merkleRoot: tree.getHexRoot(),\n      baseUri,\n      originalEntriesUri,\n      shardNybbles,\n      tokenDecimals,\n      isShardedMerkleTree: true\n    };\n    const masterUri = await storage.upload(shardedMerkleInfo);\n    return {\n      shardedMerkleInfo,\n      uri: masterUri\n    };\n  }\n  async getProof(address, provider, snapshotFormatVersion) {\n    const shardId = address.slice(2, 2 + this.shardNybbles).toLowerCase();\n    let shard = this.shards[shardId];\n    const currencyDecimalMap = {};\n    if (shard === undefined) {\n      try {\n        const uri = this.baseUri.endsWith(\"/\") ? this.baseUri : `${this.baseUri}/`;\n        shard = this.shards[shardId] = await this.storage.downloadJSON(`${uri}${shardId}.json`);\n        const hashedEntries = await Promise.all(shard.entries.map(async entry => {\n          // cache decimals for each currency to avoid refetching for every address\n          const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n          return ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n        }));\n        this.trees[shardId] = new MerkleTree(hashedEntries, utils.keccak256, {\n          sort: true\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n    const entry = shard.entries.find(i => i.address.toLowerCase() === address.toLowerCase());\n    if (!entry) {\n      return null;\n    }\n    const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n    const leaf = ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n    const proof = this.trees[shardId].getProof(leaf).map(i => \"0x\" + i.data.toString(\"hex\"));\n    return SnapshotEntryWithProofSchema.parseAsync({\n      ...entry,\n      proof: proof.concat(shard.proofs)\n    });\n  }\n  async getAllEntries() {\n    try {\n      return await this.storage.downloadJSON(this.originalEntriesUri);\n    } catch (e) {\n      console.warn(\"Could not fetch original snapshot entries\", e);\n      return [];\n    }\n  }\n}\n\n/**\n * @internal\n */\nasync function fetchSnapshotEntryForAddress(address, merkleRoot, merkleMetadata, provider, storage, snapshotFormatVersion) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const merkleTree = await ShardedMerkleTree.fromShardedMerkleTreeInfo(raw, storage);\n      return await merkleTree.getProof(address, provider, snapshotFormatVersion);\n    }\n    // legacy non-sharded, just fetch it all and filter out\n    const snapshotData = await SnapshotSchema.parseAsync(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      return snapshotData.claims.find(c => c.address.toLowerCase() === address.toLowerCase()) || null;\n    }\n  }\n  return null;\n}\n\nfunction legacyContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims\n  };\n}\n\nfunction newContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerWallet,\n    waitTimeInSecondsBetweenClaims: 0,\n    metadata: model.metadata\n  };\n}\n\n/**\n * @internal\n */\nasync function approveErc20Allowance(contractToApprove, currencyAddress, price, quantity, tokenDecimals) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n  const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  const totalPrice = BigNumber.from(price).mul(BigNumber.from(quantity)).div(utils.parseUnits(\"1\", tokenDecimals));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [spender, allowance.add(totalPrice)]);\n  }\n}\n\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns  `overrides` and `proofs` as an object.\n */\nasync function prepareClaim(addressToClaim, quantity, activeClaimCondition, merkleMetadataFetcher, tokenDecimals, contractWrapper, storage, checkERC20Allowance, snapshotFormatVersion) {\n  let maxClaimable = convertQuantityToBigNumber(activeClaimCondition.maxClaimablePerWallet, tokenDecimals);\n  let proofs = [utils.hexZeroPad([0], 32)];\n  let priceInProof = activeClaimCondition.price; // the price to send to the contract in claim proofs\n  let currencyAddressInProof = activeClaimCondition.currencyAddress;\n  try {\n    if (!activeClaimCondition.merkleRootHash.toString().startsWith(constants.AddressZero)) {\n      const snapshotEntry = await fetchSnapshotEntryForAddress(addressToClaim, activeClaimCondition.merkleRootHash.toString(), await merkleMetadataFetcher(), contractWrapper.getProvider(), storage, snapshotFormatVersion);\n      if (snapshotEntry) {\n        proofs = snapshotEntry.proof;\n        // override only if not default values (unlimited for quantity, zero addr for currency)\n        maxClaimable = snapshotEntry.maxClaimable === \"unlimited\" ? constants.MaxUint256 : utils.parseUnits(snapshotEntry.maxClaimable, tokenDecimals);\n        priceInProof = snapshotEntry.price === undefined || snapshotEntry.price === \"unlimited\" ? constants.MaxUint256 : await normalizePriceValue(contractWrapper.getProvider(), snapshotEntry.price, snapshotEntry.currencyAddress || constants.AddressZero);\n        currencyAddressInProof = snapshotEntry.currencyAddress || constants.AddressZero;\n      } else {\n        // if no snapshot entry, and it's a v1 format (exclusive allowlist) then address can't claim\n        if (snapshotFormatVersion === SnapshotFormatVersion.V1) {\n          throw new Error(\"No claim found for this address\");\n        }\n        // but if its snapshot v2 (override list behavior) then address can still claim with default settings\n      }\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if (e?.message === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\"failed to check claim condition merkle root hash, continuing anyways\", e);\n  }\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  // the actual price to check allowance against\n  // if proof price is unlimited, then we use the price from the claim condition\n  // this mimics the contract behavior\n  const pricePerToken = priceInProof.toString() !== constants.MaxUint256.toString() ? priceInProof : activeClaimCondition.price;\n  // same for currency address\n  const currencyAddress = currencyAddressInProof !== constants.AddressZero ? currencyAddressInProof : activeClaimCondition.currencyAddress;\n  if (pricePerToken.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = BigNumber.from(pricePerToken).mul(quantity).div(utils.parseUnits(\"1\", tokenDecimals));\n    } else if (checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currencyAddress, pricePerToken, quantity, tokenDecimals);\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxClaimable,\n    price: pricePerToken,\n    currencyAddress: currencyAddress,\n    priceInProof,\n    currencyAddressInProof\n  };\n}\n\n/**\n * @internal\n */\nconst CurrencySchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  symbol: z.string(),\n  decimals: z.number()\n}))();\n\n/**\n * @internal\n */\nconst CurrencyValueSchema = /* @__PURE__ */(() => CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: z.string()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionMetadataSchema = /* @__PURE__ */(() => z.object({\n  name: z.string().optional()\n}).catchall(z.unknown()))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputSchema = /* @__PURE__ */(() => z.object({\n  startTime: StartDateSchema,\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: AmountSchema.default(0),\n  maxClaimableSupply: QuantitySchema,\n  maxClaimablePerWallet: QuantitySchema,\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: BytesLikeSchema.default(utils.hexZeroPad([0], 32)),\n  snapshot: z.optional(SnapshotInputSchema).nullable(),\n  metadata: ClaimConditionMetadataSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputArray = /* @__PURE__ */(() => z.array(ClaimConditionInputSchema))();\n\n/**\n * @internal\n */\nconst PartialClaimConditionInputSchema = /* @__PURE__ */(() => ClaimConditionInputSchema.partial())();\n\n/**\n * @internal\n */\nconst ClaimConditionOutputSchema = /* @__PURE__ */(() => ClaimConditionInputSchema.extend({\n  availableSupply: QuantitySchema,\n  currentMintSupply: QuantitySchema,\n  currencyMetadata: CurrencyValueSchema.default({\n    value: BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\"\n  }),\n  price: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform(n => new Date(n.toNumber() * 1000)),\n  snapshot: SnapshotInputSchema.optional().nullable()\n}))();\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param tokenDecimals - the token decimals\n * @param provider - the provider to use\n * @param storage - the storage to upload to\n * @param snapshotFormatVersion - the snapshot format version\n * @returns The generated snapshot and URI\n * @internal\n */\nasync function createSnapshot(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const input = await parseSnapshotInputs(snapshotInput);\n  const addresses = input.map(i => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n  const tree = await ShardedMerkleTree.buildAndUpload(input, tokenDecimals, provider, storage, snapshotFormatVersion);\n  return {\n    merkleRoot: tree.shardedMerkleInfo.merkleRoot,\n    snapshotUri: tree.uri\n  };\n}\n\n/**\n * Create a MerkleTree based on an allow list of addresses and maxClaimable\n * @param snapshotInput - the list of addresses and maxClaimable\n * @param tokenDecimals - optional decimals for the token to claim (default 18)\n * @param version - optional version of the snapshot format (default V1)\n * @returns The generated MerkleTree\n */\nasync function createMerkleTreeFromAllowList(snapshotInput) {\n  let tokenDecimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SnapshotFormatVersion.V1;\n  const input = await parseSnapshotInputs(snapshotInput);\n  const addresses = input.map(i => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n  const leaves = input.map(i => {\n    return hashAllowListEntry(i, tokenDecimals, version);\n  });\n  const tree = new MerkleTree(leaves, utils.keccak256, {\n    sort: true\n  });\n  return tree;\n}\n\n/**\n * Get the proofs for a given entry of addresses\n * @param merkleTree - the merkle tree to get the proof from\n * @param snapshotEntry - the entry to get the proof for\n * @param tokenDecimals - optional decimals for the token to claim (default 18)\n * @param version - optional version of the snapshot format (default V1)\n * @returns\n */\nasync function getProofsForAllowListEntry(merkleTree, snapshotEntry) {\n  let tokenDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n  let version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : SnapshotFormatVersion.V1;\n  return merkleTree.getProof(hashAllowListEntry(snapshotEntry, tokenDecimals, version)).map(value => \"0x\" + value.data.toString(\"hex\"));\n}\n\n/**\n * Hash an allow list entry for use in a MerkleTree\n * @param snapshotEntry - the entry to hash\n * @param tokenDecimals - optional decimals for the token to claim (default 18)\n * @param version - optional version of the snapshot format (default V1)\n * @returns\n */\nfunction hashAllowListEntry(snapshotEntry) {\n  let tokenDecimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SnapshotFormatVersion.V1;\n  return ShardedMerkleTree.hashEntry(snapshotEntry, tokenDecimals, tokenDecimals, version);\n}\n\nfunction compare(a, b) {\n  const left = BigNumber.from(a);\n  const right = BigNumber.from(b);\n  if (left.eq(right)) {\n    return 0;\n  } else if (left.gt(right)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * @internal\n * Decorates claim conditions with merkle roots from snapshots if present\n * @param claimConditionInputs - The claim conditions to process\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @param snapshotFormatVersion - The snapshot format version to use\n */\nasync function processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const snapshotInfos = [];\n  const inputsWithSnapshots = await Promise.all(claimConditionInputs.map(async conditionInput => {\n    // check snapshots and upload if provided\n    if (conditionInput.snapshot && conditionInput.snapshot.length > 0) {\n      const snapshotInfo = await createSnapshot(conditionInput.snapshot, tokenDecimals, provider, storage, snapshotFormatVersion);\n      snapshotInfos.push(snapshotInfo);\n      conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n    } else {\n      // if no snapshot is passed or empty, reset the merkle root\n      conditionInput.merkleRootHash = utils.hexZeroPad([0], 32);\n    }\n    // fill condition with defaults values if not provided\n    return conditionInput;\n  }));\n  return {\n    inputsWithSnapshots,\n    snapshotInfos\n  };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c - The condition input\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @internal\n */\nasync function convertToContractModel(c, tokenDecimals, provider, storage) {\n  const currency = c.currencyAddress === constants.AddressZero ? NATIVE_TOKEN_ADDRESS : c.currencyAddress;\n  const maxClaimableSupply = convertQuantityToBigNumber(c.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertQuantityToBigNumber(c.maxClaimablePerWallet, tokenDecimals);\n  let metadataOrUri;\n  if (c.metadata) {\n    if (typeof c.metadata === \"string\") {\n      metadataOrUri = c.metadata;\n    } else {\n      metadataOrUri = await storage.upload(c.metadata);\n    }\n  }\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply,\n    supplyClaimed: 0,\n    maxClaimablePerWallet,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash.toString(),\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds || 0,\n    metadata: metadataOrUri\n  };\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs - The claim conditions to process\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @param snapshotFormatVersion - The snapshot format version to use\n * @internal\n */\nasync function processClaimConditionInputs(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const {\n    inputsWithSnapshots,\n    snapshotInfos\n  } = await processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion);\n  const parsedInputs = await ClaimConditionInputArray.parseAsync(inputsWithSnapshots);\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions = (await Promise.all(parsedInputs.map(c => convertToContractModel(c, tokenDecimals, provider, storage)))).sort((a, b) => {\n    return compare(a.startTimestamp, b.startTimestamp);\n  });\n  return {\n    snapshotInfos,\n    sortedConditions\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot - The merkle root to fetch the snapshot for\n * @param merkleMetadata - The merkle metadata to use\n * @param storage - The storage to use\n */\nasync function fetchSnapshot(merkleRoot, merkleMetadata, storage) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const smt = await ShardedMerkleTree.fromUri(snapshotUri, storage);\n      return smt?.getAllEntries() || null;\n    } else {\n      const snapshotData = await SnapshotSchema.parseAsync(raw);\n      if (merkleRoot === snapshotData.merkleRoot) {\n        return snapshotData.claims.map(claim => ({\n          address: claim.address,\n          maxClaimable: claim.maxClaimable,\n          price: claim.price,\n          currencyAddress: claim.currencyAddress\n        }));\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * @internal\n * @param bn - The big number to convert\n * @param tokenDecimals - The token decimals to use\n */\nfunction convertToReadableQuantity(bn, tokenDecimals) {\n  if (bn.toString() === constants.MaxUint256.toString()) {\n    return \"unlimited\";\n  } else {\n    return utils.formatUnits(bn, tokenDecimals);\n  }\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm - The contract model to transform\n * @param tokenDecimals - The token decimals to use\n * @param provider - The provider to use\n * @param merkleMetadata - The merkle metadata to use\n * @param storage - The storage to use\n * @param shouldDownloadSnapshot - Whether to download the snapshot\n * @internal\n */\nasync function transformResultToClaimCondition(pm, tokenDecimals, provider, merkleMetadata, storage, shouldDownloadSnapshot) {\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const maxClaimableSupply = convertToReadableQuantity(pm.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertToReadableQuantity(pm.maxClaimablePerWallet, tokenDecimals);\n  const availableSupply = convertToReadableQuantity(BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed), tokenDecimals);\n  const currentMintSupply = convertToReadableQuantity(pm.supplyClaimed, tokenDecimals);\n  let resolvedMetadata;\n  if (pm.metadata) {\n    resolvedMetadata = await storage.downloadJSON(pm.metadata);\n  }\n  return ClaimConditionOutputSchema.parseAsync({\n    startTime: pm.startTimestamp,\n    maxClaimableSupply,\n    maxClaimablePerWallet,\n    currentMintSupply,\n    availableSupply,\n    waitInSeconds: pm.waitTimeInSecondsBetweenClaims?.toString(),\n    price: BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: shouldDownloadSnapshot ? await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage) : undefined,\n    metadata: resolvedMetadata\n  });\n}\n\n/**\n * @internal\n * @param index - The index of the condition to update\n * @param claimConditionInput - The input claim condition to update\n * @param existingConditions - The existing claim conditions\n */\nasync function updateExistingClaimConditions(index, claimConditionInput, existingConditions) {\n  if (index >= existingConditions.length) {\n    throw Error(`Index out of bounds - got index: ${index} with ${existingConditions.length} conditions`);\n  }\n  // merge input with existing claim condition\n  const priceDecimals = existingConditions[index].currencyMetadata.decimals;\n  const priceInWei = existingConditions[index].price;\n  const priceInTokens = utils.formatUnits(priceInWei, priceDecimals);\n\n  // merge existing (output format) with incoming (input format)\n  const newConditionParsed = await ClaimConditionInputSchema.parseAsync({\n    ...existingConditions[index],\n    price: priceInTokens,\n    ...claimConditionInput\n  });\n\n  // convert to output claim condition\n  const mergedConditionOutput = await ClaimConditionOutputSchema.parseAsync({\n    ...newConditionParsed,\n    price: priceInWei\n  });\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    const formattedPrice = utils.formatUnits(newConditionAtIndex.price, priceDecimals);\n    return {\n      ...newConditionAtIndex,\n      price: formattedPrice // manually transform back to input price type\n    };\n  });\n}\n\nlet ClaimEligibility = /*#__PURE__*/function (ClaimEligibility) {\n  ClaimEligibility[\"NotEnoughSupply\"] = \"There is not enough supply to claim.\";\n  ClaimEligibility[\"AddressNotAllowed\"] = \"This address is not on the allowlist.\";\n  ClaimEligibility[\"WaitBeforeNextClaimTransaction\"] = \"Not enough time since last claim transaction. Please wait.\";\n  ClaimEligibility[\"ClaimPhaseNotStarted\"] = \"Claim phase has not started yet.\";\n  ClaimEligibility[\"AlreadyClaimed\"] = \"You have already claimed the token.\";\n  ClaimEligibility[\"WrongPriceOrCurrency\"] = \"Incorrect price or currency.\";\n  ClaimEligibility[\"OverMaxClaimablePerWallet\"] = \"Cannot claim more than maximum allowed quantity.\";\n  ClaimEligibility[\"NotEnoughTokens\"] = \"There are not enough tokens in the wallet to pay for the claim.\";\n  ClaimEligibility[\"NoActiveClaimPhase\"] = \"There is no active claim phase at the moment. Please check back in later.\";\n  ClaimEligibility[\"NoClaimConditionSet\"] = \"There is no claim condition set.\";\n  ClaimEligibility[\"NoWallet\"] = \"No wallet connected.\";\n  ClaimEligibility[\"Unknown\"] = \"No claim conditions found.\";\n  return ClaimEligibility;\n}({});\n\nfunction resolveOrGenerateId(requestUId) {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    v4({}, buffer);\n    return utils.hexlify(utils.toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return utils.hexlify(requestUId);\n  }\n}\n\n/**\n * @internal\n */\nconst BaseSignaturePayloadInput = /* @__PURE__ */(() => z.object({\n  to: AddressOrEnsSchema.refine(address => address.toLowerCase() !== constants.AddressZero, {\n    message: \"Cannot create payload to mint to zero address\"\n  }),\n  price: AmountSchema.default(0),\n  currencyAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: z.string().optional().transform(arg => resolveOrGenerateId(arg)),\n  primarySaleRecipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst Signature20PayloadInput = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  quantity: AmountSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature20PayloadOutput = /* @__PURE__ */(() => Signature20PayloadInput.extend({\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature721PayloadInput = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  metadata: NFTInputOrUriSchema,\n  royaltyRecipient: z.string().default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0)\n}))();\n\n/**\n * @internal\n */\nconst Signature721PayloadOutput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  uri: z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInputWithTokenId = /* @__PURE__ */(() => Signature1155PayloadInput.extend({\n  tokenId: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadOutput = /* @__PURE__ */(() => Signature721PayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature721WithQuantityInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @internal\n */\nconst Signature721WithQuantityOutput = /* @__PURE__ */(() => Signature721PayloadOutput.extend({\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nconst MintRequest20 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest1155 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"tokenId\",\n  type: \"uint256\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721withQuantity = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst GenericRequest = [{\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\n\nexport { newContractModelToAbstract as A, BaseSignaturePayloadInput as B, ClaimEligibility as C, convertQuantityToBigNumber as D, prepareClaim as E, SnapshotFormatVersion as F, GenericRequest as G, processClaimConditionInputs as H, abstractContractModelToLegacy as I, abstractContractModelToNew as J, updateExistingClaimConditions as K, resolveOrGenerateId as L, MintRequest20 as M, PartialClaimConditionInputSchema as P, Signature20PayloadInput as S, approveErc20Allowance as a, createSnapshot as b, convertToReadableQuantity as c, createMerkleTreeFromAllowList as d, ClaimConditionMetadataSchema as e, fetchSnapshotEntryForAddress as f, getProofsForAllowListEntry as g, hashAllowListEntry as h, ClaimConditionInputSchema as i, ClaimConditionInputArray as j, ClaimConditionOutputSchema as k, CurrencySchema as l, CurrencyValueSchema as m, Signature20PayloadOutput as n, Signature721PayloadInput as o, Signature721PayloadOutput as p, Signature1155PayloadInput as q, Signature1155PayloadInputWithTokenId as r, Signature1155PayloadOutput as s, Signature721WithQuantityInput as t, Signature721WithQuantityOutput as u, MintRequest721 as v, MintRequest1155 as w, MintRequest721withQuantity as x, transformResultToClaimCondition as y, legacyContractModelToAbstract as z };\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n"],"file":"assets/index-voFwA1yT.js"}