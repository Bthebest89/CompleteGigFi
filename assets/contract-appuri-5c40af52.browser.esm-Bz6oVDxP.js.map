{"version":3,"file":"contract-appuri-5c40af52.browser.esm-Bz6oVDxP.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js"],"sourcesContent":["import { ai as isExtensionEnabled, cJ as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, aZ as EventType, cK as FEATURE_APPURI } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction, c as estimateTransactionCost } from './transactions-72f9603c.browser.esm.js';\nimport { utils } from 'ethers';\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param featureName - The feature name to check\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  const b = isExtensionEnabled(contractWrapper.abi, featureName, contractWrapper.extensions);\n  return b;\n}\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param functionName - The function name to check\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @contract\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns The metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @contract\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\nfunction toEther(amount) {\n  return utils.formatEther(amount);\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns The estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const gasCost = await estimateTransactionCost(this.contractWrapper.getProvider(), await this.contractWrapper.populateTransaction(fn, args));\n    return toEther(gasCost);\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns The estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns The current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns The appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h, toEther as t };\n"],"names":["detectContractFeature","contractWrapper","featureName","isExtensionEnabled","abi","extensions","hasFunction","functionName","readContract","functions","ContractMetadata","FEATURE_METADATA","name","constructor","schema","storage","this","parseOutputMetadata","metadata","output","parseAsync","parseInputMetadata","input","get","data","supportsContractMetadata","uri","read","includes","downloadJSON","contractName","contractSymbol","publishedMetadata","err","fetchContractMetadataFromAddress","address","getProvider","options","symbol","description","info","title","e","Error","set","buildTransactionFunction","async","_parseAndUploadMetadata","wrapper","Transaction","fromContractWrapper","method","args","parse","receipt","ExtensionNotImplementedError","update","prepare","parsedMetadata","upload","ContractEvents","addTransactionListener","listener","addListener","EventType","removeTransactionListener","off","addEventListener","eventName","event","interface","getEvent","filter","topics","getEventTopic","wrappedListener","log","parsedLog","parseLog","toContractEvent","eventFragment","on","listenToAllEvents","removeEventListener","removeAllListeners","getAllEvents","filters","arguments","length","undefined","fromBlock","toBlock","order","orderedEvents","queryFilter","sort","a","b","blockNumber","parseEvents","getEvents","eventInterface","inputs","map","events","transaction","Object","fromEntries","entries","slice","key","value","rawLog","results","forEach","param","index","Array","isArray","components","arr","type","objArray","i","tuple","obj","j","push","GasCostEstimator","gasCostOf","fn","gasCost","estimateTransactionCost","populateTransaction","utils.formatEther","gasLimitOf","estimateGas","currentGasPriceInGwei","price","getGasPrice","utils.formatUnits","ContractAppURI","FEATURE_APPURI","replaceGatewayUrlWithScheme","app_uri","getGatewayUrls","appURI"],"mappings":"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","x_google_ignoreList":[0]}