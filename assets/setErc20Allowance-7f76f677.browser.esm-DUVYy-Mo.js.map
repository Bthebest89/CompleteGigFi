{"version":3,"mappings":";6HAIA,MAAMA,EAAiC,KAAOC,EAAEC,OAAO,IAAIC,SAASF,EAAEG,MAAM,CAACC,EAA0BJ,EAAEK,aAAlE,GAKjCC,EAAyC,KAAON,EAAEG,MAAM,CAACH,EAAEO,MAAMP,EAAEO,MAAMR,IAAkBS,WAAUC,GAAKA,EAAEC,SAASV,EAAEO,MAAMR,GAAkBA,IAAkBY,WAAWC,WAAnI,GAKzCC,EAA+B,KAAOb,EAAEC,OAAO,CACnDa,KAAMd,EAAEG,MAAM,CAACH,EAAEe,SAAUf,EAAEgB,WAAWL,WAAWC,WACnDK,YAAajB,EAAEe,SAASH,WAAWD,WAAWC,WAC9CM,MAAOC,EAA2BP,WAAWD,WAC7CS,cAAeD,EAA2BR,WAAWC,aAJlB,GAU/BS,EAAgC,KAAOR,EAAcS,OAAO,CAChEC,aAAcJ,EAA2BP,WAAWD,WACpDa,iBAAkBC,EAASd,WAAWC,WACtCc,WAAYpB,EACZqB,WAAYrB,IACXJ,SAASF,EAAEG,MAAM,CAACC,EAA0BJ,EAAEK,aALX,GAUhCuB,EAAqC,KAAO5B,EAAEG,MAAM,CAACkB,EAAgBrB,EAAEe,WAAlC,GAKrCc,EAAiC,KAAOR,EAAeC,OAAO,CAClEQ,GAAI9B,EAAEe,SACNgB,IAAK/B,EAAEe,SACPG,MAAOlB,EAAEe,SAASH,WAAWD,WAC7BY,aAAcvB,EAAEe,SAASH,WAAWD,WACpCS,cAAepB,EAAEe,SAASH,WAAWD,aALA,GA+BvCqB,eAAeC,EAAkBC,EAAmBC,EAAOC,EAAiBC,GAC1E,IAAIC,EAAcF,GAEX,CACL,MAAMG,SAAkBC,GAAAR,UAAA,MAAAS,QAAAC,SAAAC,OAAO,uBAAkDC,MAAAC,KAAAC,KAAA,OAAAL,QAAAC,EAAA,GAAAK,+BAAGN,QAC9EO,EAASd,EAAkBe,YAC3BC,EAAWhB,EAAkBiB,cAC7BC,EAAQ,IAAIC,EAAgBL,GAAUE,EAAUd,EAAiBG,EAAUL,EAAkBoB,QAASpB,EAAkBqB,SACxHC,QAActB,EAAkBuB,mBAChCC,EAAUxB,EAAkByB,QAMlC,aALwBP,EAAMQ,KAAK,YAAa,CAACJ,EAAOE,KAC1CG,GAAG1B,UAETiB,EAAMU,gBAAgB,UAAW,CAACJ,EAASvB,IAE5CE,CACX,CAdIA,EAAiB,MAAIF,CAezB","names":["PropertiesInput","z","object","catchall","union","BigNumberTransformSchema","unknown","OptionalPropertiesInput","array","transform","i","flat","optional","nullable","BasicNFTInput","name","string","number","description","image","FileOrBufferOrStringSchema","animation_url","CommonNFTInput","extend","external_url","background_color","HexColor","properties","attributes","NFTInputOrUriSchema","CommonNFTOutput","id","uri","async","setErc20Allowance","contractToApprove","value","currencyAddress","overrides","isNativeToken","ERC20Abi","__vitePreload","default","__vite_default__","import","then","n","dV","__VITE_PRELOAD__","signer","getSigner","provider","getProvider","erc20","ContractWrapper","options","storage","owner","getSignerAddress","spender","address","read","lt","sendTransaction"],"ignoreList":[0],"sources":["../../node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-7f76f677.browser.esm.js"],"sourcesContent":["import { cx as BigNumberTransformSchema, cy as FileOrBufferOrStringSchema, cz as HexColor, cs as ContractWrapper } from './index-33cd3415.browser.esm.js';\nimport { z } from 'zod';\nimport { i as isNativeToken } from './fetchCurrencyValue-32d08b05.browser.esm.js';\n\nconst PropertiesInput = /* @__PURE__ */(() => z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = /* @__PURE__ */(() => z.union([z.array(z.array(PropertiesInput)).transform(i => i.flat()), z.array(PropertiesInput), PropertiesInput]).optional().nullable())();\n\n/**\n * @internal\n */\nconst BasicNFTInput = /* @__PURE__ */(() => z.object({\n  name: z.union([z.string(), z.number()]).optional().nullable(),\n  description: z.string().nullable().optional().nullable(),\n  image: FileOrBufferOrStringSchema.nullable().optional(),\n  animation_url: FileOrBufferOrStringSchema.optional().nullable()\n}))();\n\n/**\n * @internal\n */\nconst CommonNFTInput = /* @__PURE__ */(() => BasicNFTInput.extend({\n  external_url: FileOrBufferOrStringSchema.nullable().optional(),\n  background_color: HexColor.optional().nullable(),\n  properties: OptionalPropertiesInput,\n  attributes: OptionalPropertiesInput\n}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst NFTInputOrUriSchema = /* @__PURE__ */(() => z.union([CommonNFTInput, z.string()]))();\n\n/**\n * @internal\n */\nconst CommonNFTOutput = /* @__PURE__ */(() => CommonNFTInput.extend({\n  id: z.string(),\n  uri: z.string(),\n  image: z.string().nullable().optional(),\n  external_url: z.string().nullable().optional(),\n  animation_url: z.string().nullable().optional()\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.address;\n    const allowance = await erc20.read(\"allowance\", [owner, spender]);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\nexport { BasicNFTInput as B, CommonNFTInput as C, NFTInputOrUriSchema as N, CommonNFTOutput as a, setErc20Allowance as s };\n"],"file":"assets/setErc20Allowance-7f76f677.browser.esm-DUVYy-Mo.js"}