{"version":3,"file":"alchemy-provider-6749bff8-BBx-E4YY.js","sources":["../../node_modules/alchemy-sdk/dist/esm/alchemy-provider-6749bff8.js"],"sourcesContent":["import { _ as __awaiter, D as DEFAULT_ALCHEMY_API_KEY, C as CustomNetworks, a as DEFAULT_NETWORK, N as Network, I as IS_BROWSER, V as VERSION, l as logWarn, d as deepCopy, E as EthersNetwork, g as getAlchemyHttpUrl, b as getAlchemyWsUrl } from './index-0a90ef81.js';\nimport { getNetwork } from '@ethersproject/networks';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { fetchJson } from '@ethersproject/web';\nimport './api/utils';\nimport '@ethersproject/bignumber';\nimport 'axios';\nimport '@ethersproject/abstract-provider';\nimport '@ethersproject/wallet';\nimport '@ethersproject/contracts';\n\n/** Maximum size of a batch on the rpc provider. */\r\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\r\n/** Timeout interval before the pending batch is sent. */\r\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\r\n/**\r\n * Internal class to enqueue requests and automatically send/process batches.\r\n *\r\n * The underlying batching mechanism is loosely based on ethers.js's\r\n * `JsonRpcBatchProvider`.\r\n *\r\n * @internal\r\n */\r\nclass RequestBatcher {\r\n    constructor(sendBatchFn, maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE) {\r\n        this.sendBatchFn = sendBatchFn;\r\n        this.maxBatchSize = maxBatchSize;\r\n        /**\r\n         * Array of enqueued requests along with the constructed promise handlers for\r\n         * each request.\r\n         */\r\n        this.pendingBatch = [];\r\n    }\r\n    /**\r\n     * Enqueues the provided request. The batch is immediately sent if the maximum\r\n     * batch size is reached. Otherwise, the request is enqueued onto a batch that\r\n     * is sent after 10ms.\r\n     *\r\n     * Returns a promise that resolves with the result of the request.\r\n     */\r\n    enqueueRequest(request) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const inflightRequest = {\r\n                request,\r\n                resolve: undefined,\r\n                reject: undefined\r\n            };\r\n            const promise = new Promise((resolve, reject) => {\r\n                inflightRequest.resolve = resolve;\r\n                inflightRequest.reject = reject;\r\n            });\r\n            this.pendingBatch.push(inflightRequest);\r\n            if (this.pendingBatch.length === this.maxBatchSize) {\r\n                // Send batch immediately if we are at the maximum batch size.\r\n                void this.sendBatchRequest();\r\n            }\r\n            else if (!this.pendingBatchTimer) {\r\n                // Schedule batch for next event loop + short duration\r\n                this.pendingBatchTimer = setTimeout(() => this.sendBatchRequest(), DEFAULT_REQUEST_BATCH_DELAY_MS);\r\n            }\r\n            return promise;\r\n        });\r\n    }\r\n    /**\r\n     * Sends the currently queued batches and resets the batch and timer. Processes\r\n     * the batched response results back to the original promises.\r\n     */\r\n    sendBatchRequest() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Get the current batch and clear it, so new requests\r\n            // go into the next batch\r\n            const batch = this.pendingBatch;\r\n            this.pendingBatch = [];\r\n            if (this.pendingBatchTimer) {\r\n                clearTimeout(this.pendingBatchTimer);\r\n                this.pendingBatchTimer = undefined;\r\n            }\r\n            // Get the request as an array of requests\r\n            const request = batch.map(inflight => inflight.request);\r\n            return this.sendBatchFn(request).then(result => {\r\n                // For each result, feed it to the correct Promise, depending\r\n                // on whether it was a success or error\r\n                batch.forEach((inflightRequest, index) => {\r\n                    const payload = result[index];\r\n                    if (payload.error) {\r\n                        const error = new Error(payload.error.message);\r\n                        error.code = payload.error.code;\r\n                        error.data = payload.error.data;\r\n                        inflightRequest.reject(error);\r\n                    }\r\n                    else {\r\n                        inflightRequest.resolve(payload.result);\r\n                    }\r\n                });\r\n            }, error => {\r\n                batch.forEach(inflightRequest => {\r\n                    inflightRequest.reject(error);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\n\n/**\r\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\r\n *\r\n * @public\r\n */\r\nclass AlchemyProvider extends JsonRpcProvider {\r\n    /** @internal */\r\n    constructor(config) {\r\n        // Normalize the API Key to a string.\r\n        const apiKey = AlchemyProvider.getApiKey(config.apiKey);\r\n        // Generate our own connection info with the correct endpoint URLs.\r\n        const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\r\n        let connection = AlchemyProvider.getAlchemyConnectionInfo(alchemyNetwork, apiKey, 'http');\r\n        // If a hardcoded url was specified in the config, use that instead of the\r\n        // provided apiKey or network.\r\n        if (config.url !== undefined) {\r\n            connection.url = config.url;\r\n        }\r\n        connection.throttleLimit = config.maxRetries;\r\n        // Add user provided overrides if they exist.\r\n        if (config.connectionInfoOverrides) {\r\n            connection = Object.assign(Object.assign({}, connection), config.connectionInfoOverrides);\r\n        }\r\n        // Normalize the Alchemy named network input to the network names used by\r\n        // ethers. This allows the parent super constructor in JsonRpcProvider to\r\n        // correctly set the network.\r\n        const ethersNetwork = EthersNetwork[alchemyNetwork];\r\n        super(connection, ethersNetwork);\r\n        this.apiKey = config.apiKey;\r\n        this.maxRetries = config.maxRetries;\r\n        this.batchRequests = config.batchRequests;\r\n        // TODO: support individual headers when calling batch\r\n        const batcherConnection = Object.assign(Object.assign({}, this.connection), { headers: Object.assign(Object.assign({}, this.connection.headers), { 'Alchemy-Ethers-Sdk-Method': 'batchSend' }) });\r\n        const sendBatchFn = (requests) => {\r\n            return fetchJson(batcherConnection, JSON.stringify(requests));\r\n        };\r\n        this.batcher = new RequestBatcher(sendBatchFn);\r\n        this.modifyFormatter();\r\n    }\r\n    /**\r\n     * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\r\n     * ethers.js. Returns the API key for an Alchemy provider.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */\r\n    static getApiKey(apiKey) {\r\n        if (apiKey == null) {\r\n            return DEFAULT_ALCHEMY_API_KEY;\r\n        }\r\n        if (apiKey && typeof apiKey !== 'string') {\r\n            throw new Error(`Invalid apiKey '${apiKey}' provided. apiKey must be a string.`);\r\n        }\r\n        return apiKey;\r\n    }\r\n    /**\r\n     * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\r\n     *\r\n     * This override allows the SDK to set the provider's network to values not\r\n     * yet supported by ethers.js.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */\r\n    static getNetwork(network) {\r\n        if (typeof network === 'string' && network in CustomNetworks) {\r\n            return CustomNetworks[network];\r\n        }\r\n        // Call the standard ethers.js getNetwork method for other networks.\r\n        return getNetwork(network);\r\n    }\r\n    /**\r\n     * Converts the `Networkish` input to the network enum used by Alchemy.\r\n     *\r\n     * @internal\r\n     */\r\n    static getAlchemyNetwork(network) {\r\n        if (network === undefined) {\r\n            return DEFAULT_NETWORK;\r\n        }\r\n        if (typeof network === 'number') {\r\n            throw new Error(`Invalid network '${network}' provided. Network must be a string.`);\r\n        }\r\n        // Guaranteed that `typeof network === 'string`.\r\n        const isValidNetwork = Object.values(Network).includes(network);\r\n        if (!isValidNetwork) {\r\n            throw new Error(`Invalid network '${network}' provided. Network must be one of: ` +\r\n                `${Object.values(Network).join(', ')}.`);\r\n        }\r\n        return network;\r\n    }\r\n    /**\r\n     * Returns a {@link ConnectionInfo} object compatible with ethers that contains\r\n     * the correct URLs for Alchemy.\r\n     *\r\n     * @internal\r\n     */\r\n    static getAlchemyConnectionInfo(network, apiKey, type) {\r\n        const url = type === 'http'\r\n            ? getAlchemyHttpUrl(network, apiKey)\r\n            : getAlchemyWsUrl(network, apiKey);\r\n        return {\r\n            headers: IS_BROWSER\r\n                ? {\r\n                    'Alchemy-Ethers-Sdk-Version': VERSION\r\n                }\r\n                : {\r\n                    'Alchemy-Ethers-Sdk-Version': VERSION,\r\n                    'Accept-Encoding': 'gzip'\r\n                },\r\n            allowGzip: true,\r\n            url\r\n        };\r\n    }\r\n    /**\r\n     * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\r\n     * method is called when calling methods on the parent class `BaseProvider`.\r\n     *\r\n     * @override\r\n     */\r\n    detectNetwork() {\r\n        const _super = Object.create(null, {\r\n            detectNetwork: { get: () => super.detectNetwork }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let network = this.network;\r\n            if (network == null) {\r\n                network = yield _super.detectNetwork.call(this);\r\n                if (!network) {\r\n                    throw new Error('No network detected');\r\n                }\r\n            }\r\n            return network;\r\n        });\r\n    }\r\n    _startPending() {\r\n        logWarn('WARNING: Alchemy Provider does not support pending filters');\r\n    }\r\n    /**\r\n     * Overrides the ether's `isCommunityResource()` method. Returns true if the\r\n     * current api key is the default key.\r\n     *\r\n     * @override\r\n     */\r\n    isCommunityResource() {\r\n        return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\r\n    }\r\n    /**\r\n     * Overrides the base {@link JsonRpcProvider.send} method to implement custom\r\n     * logic for sending requests to Alchemy.\r\n     *\r\n     * @param method The method name to use for the request.\r\n     * @param params The parameters to use for the request.\r\n     * @override\r\n     * @public\r\n     */\r\n    // TODO: Add headers for `perform()` override.\r\n    send(method, params) {\r\n        return this._send(method, params, 'send');\r\n    }\r\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `JsonRpcProvider.send()`.\r\n     *\r\n     * This method is copied over directly in order to implement custom headers\r\n     *\r\n     * @internal\r\n     */\r\n    _send(method, params, methodName, forceBatch = false) {\r\n        const request = {\r\n            method,\r\n            params,\r\n            id: this._nextId++,\r\n            jsonrpc: '2.0'\r\n        };\r\n        // START MODIFIED CODE\r\n        const connection = Object.assign({}, this.connection);\r\n        connection.headers['Alchemy-Ethers-Sdk-Method'] = methodName;\r\n        if (this.batchRequests || forceBatch) {\r\n            return this.batcher.enqueueRequest(request);\r\n        }\r\n        // END MODIFIED CODE\r\n        this.emit('debug', {\r\n            action: 'request',\r\n            request: deepCopy(request),\r\n            provider: this\r\n        });\r\n        // We can expand this in the future to any call, but for now these\r\n        // are the biggest wins and do not require any serializing parameters.\r\n        const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\r\n        if (cache && this._cache[method]) {\r\n            return this._cache[method];\r\n        }\r\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\r\n            this.emit('debug', {\r\n                action: 'response',\r\n                request,\r\n                response: result,\r\n                provider: this\r\n            });\r\n            return result;\r\n        }, error => {\r\n            this.emit('debug', {\r\n                action: 'response',\r\n                error,\r\n                request,\r\n                provider: this\r\n            });\r\n            throw error;\r\n        });\r\n        // Cache the fetch, but clear it on the next event loop\r\n        if (cache) {\r\n            this._cache[method] = result;\r\n            setTimeout(() => {\r\n                // @ts-ignore - This is done by ethers.\r\n                this._cache[method] = null;\r\n            }, 0);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Overrides the base `Formatter` class inherited from ethers to support\r\n     * returning custom fields in Ethers response types.\r\n     *\r\n     * For context, ethers has a `Formatter` class that is used to format the\r\n     * response from a JSON-RPC request. Any fields that are not defined in the\r\n     * `Formatter` class are removed from the returned response. By modifying the\r\n     * `Formatter` class in this method, we can add support for fields that are\r\n     * not defined in ethers.\r\n     */\r\n    modifyFormatter() {\r\n        this.formatter.formats['receiptLog']['removed'] = val => {\r\n            if (typeof val === 'boolean') {\r\n                return val;\r\n            }\r\n            return undefined;\r\n        };\r\n    }\r\n}\r\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Original code copied over from ether.js's\r\n * `@ethersproject/web/src.ts/index.ts`. Used to support\r\n * {@link AlchemyProvider._send}, which is also copied over.\r\n */\r\nfunction getResult(payload) {\r\n    if (payload.error) {\r\n        const error = new Error(payload.error.message);\r\n        error.code = payload.error.code;\r\n        error.data = payload.error.data;\r\n        throw error;\r\n    }\r\n    return payload.result;\r\n}\n\nexport { AlchemyProvider };\n//# sourceMappingURL=alchemy-provider-6749bff8.js.map\n"],"names":["RequestBatcher","constructor","sendBatchFn","maxBatchSize","this","pendingBatch","enqueueRequest","request","__awaiter","inflightRequest","resolve","undefined","reject","promise","Promise","push","length","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","AlchemyProvider","JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","connectionInfoOverrides","Object","assign","super","EthersNetwork","batchRequests","batcherConnection","headers","batcher","requests","fetchJson","JSON","stringify","modifyFormatter","DEFAULT_ALCHEMY_API_KEY","getNetwork","CustomNetworks","DEFAULT_NETWORK","values","Network","includes","join","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","detectNetwork","_super","create","get","call","_startPending","logWarn","isCommunityResource","send","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","emit","action","deepCopy","provider","cache","indexOf","_cache","getResult","response","formatter","formats","val"],"mappings":"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","x_google_ignoreList":[0]}