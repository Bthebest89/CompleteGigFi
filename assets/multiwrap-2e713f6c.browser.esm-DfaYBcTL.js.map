{"version":3,"file":"multiwrap-2e713f6c.browser.esm-DfaYBcTL.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/multiwrap-2e713f6c.browser.esm.js"],"sourcesContent":["import { utils } from 'ethers';\nimport { C as ContractEncoder, f as fetchCurrencyMetadata } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-654a940b.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-9851c0eb.browser.esm.js';\nimport { dI as MULTIWRAP_CONTRACT_ROLES, cs as ContractWrapper, bj as AbiSchema, dJ as MultiwrapContractSchema, aL as resolveAddress } from './index-33cd3415.browser.esm.js';\nimport { i as isTokenApprovedForTransfer } from './marketplace-e3129e2f.browser.esm.js';\nimport { b as uploadOrExtractURI } from './QueryParams-32a56510.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-5c40af52.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-49e75547.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-4c4125d2.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport '@thirdweb-dev/storage';\nimport './signature-d3ea643d.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-d1700f0b.browser.esm.js';\nimport 'uuid';\nimport './erc-721-27306550.browser.esm.js';\nimport './drop-claim-conditions-e6f2abbf.browser.esm.js';\nimport 'fast-deep-equal';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\n// TODO create extension wrappers for this\nclass Multiwrap extends StandardErc721 {\n  static contractRoles = MULTIWRAP_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.read(\"getWrappedContents\", [wrappedTokenId]);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  wrap = /* @__PURE__ */buildTransactionFunction(async (contents, wrappedTokenMetadata, recipientAddress) => {\n    const [uri, tokens, recipient] = await Promise.all([uploadOrExtractURI(wrappedTokenMetadata, this.storage), this.toTokenStructList(contents), resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress())]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"wrap\",\n      args: [tokens, uri, recipient],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"TokensWrapped event not found\");\n        }\n        const tokenId = event[0].args.tokenIdOfWrappedToken;\n        return {\n          id: tokenId,\n          receipt,\n          data: () => this.get(tokenId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  unwrap = /* @__PURE__ */buildTransactionFunction(async (wrappedTokenId, recipientAddress) => {\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"unwrap\",\n      args: [wrappedTokenId, recipient]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Multiwrap };\n"],"names":["Multiwrap","StandardErc721","static","MULTIWRAP_CONTRACT_ROLES","constructor","network","address","storage","abi","arguments","length","undefined","chainId","super","ContractWrapper","this","AbiSchema","parse","metadata","ContractMetadata","contractWrapper","MultiwrapContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","royalties","ContractRoyalty","owner","ContractOwner","getWrappedContents","wrappedTokenId","wrappedTokens","read","erc20Tokens","erc721Tokens","erc1155Tokens","token","tokenType","tokenMetadata","fetchCurrencyMetadata","getProvider","assetContract","push","contractAddress","quantity","utils.formatUnits","totalAmount","decimals","tokenId","toString","wrap","buildTransactionFunction","async","contents","wrappedTokenMetadata","recipientAddress","uri","tokens","recipient","Promise","all","uploadOrExtractURI","toTokenStructList","resolveAddress","getSignerAddress","Transaction","fromContractWrapper","method","args","receipt","event","parseLogs","logs","Error","tokenIdOfWrappedToken","id","data","get","unwrap","provider","erc20","normalizedQuantity","normalizePriceValue","hasERC20Allowance","getAddress","erc721","isTokenApprovedForTransfer","erc1155","prepare","overrides","call","functionName"],"mappings":"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","x_google_ignoreList":[0]}