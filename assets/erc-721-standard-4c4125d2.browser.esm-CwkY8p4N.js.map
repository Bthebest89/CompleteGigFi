{"version":3,"file":"erc-721-standard-4c4125d2.browser.esm-CwkY8p4N.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-4c4125d2.browser.esm.js"],"sourcesContent":["import { aL as resolveAddress } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { E as Erc721 } from './erc-721-27306550.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns The address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n"],"names":["StandardErc721","chainId","this","_chainId","constructor","contractWrapper","storage","erc721","Erc721","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","getAll","queryParams","getOwned","walletAddress","resolveAddress","getOwnedTokenIds","totalSupply","totalCirculatingSupply","get","tokenId","ownerOf","balanceOf","balance","isApproved","operator","transfer","buildTransactionFunction","async","to","prepare","setApprovalForAll","approved","setApprovalForToken","Transaction","fromContractWrapper","method","args"],"mappings":"qHAcA,MAAMA,EACJ,WAAIC,GACF,OAAOC,KAAKC,QAChB,CACE,WAAAC,CAAYC,EAAiBC,EAASL,GACpCC,KAAKG,gBAAkBA,EACvBH,KAAKI,QAAUA,EACfJ,KAAKK,OAAS,IAAIC,EAAON,KAAKG,gBAAiBH,KAAKI,QAASL,GAC7DC,KAAKC,SAAWF,CACpB,CAKE,gBAAAQ,CAAiBC,GACfR,KAAKG,gBAAgBM,uBAAuBD,EAChD,CACE,UAAAE,GACE,OAAOV,KAAKG,gBAAgBQ,OAChC,CAiBE,YAAMC,CAAOC,GACX,OAAOb,KAAKK,OAAOO,OAAOC,EAC9B,CAkBE,cAAMC,CAASC,EAAeF,GAI5B,OAHIE,IACFA,QAAsBC,EAAeD,IAEhCf,KAAKK,OAAOS,SAASC,EAAeF,EAC/C,CAME,sBAAMI,CAAiBF,GAIrB,OAHIA,IACFA,QAAsBC,EAAeD,IAEhCf,KAAKK,OAAOY,iBAAiBF,EACxC,CAKE,iBAAMG,GACJ,OAAOlB,KAAKK,OAAOc,wBACvB,CAaE,SAAMC,CAAIC,GACR,OAAOrB,KAAKK,OAAOe,IAAIC,EAC3B,CAQE,aAAMC,CAAQD,GACZ,OAAOrB,KAAKK,OAAOiB,QAAQD,EAC/B,CAcE,eAAME,CAAUZ,GACd,OAAOX,KAAKK,OAAOkB,UAAUZ,EACjC,CAKE,aAAMa,GACJ,OAAOxB,KAAKK,OAAOmB,SACvB,CAOE,gBAAMC,CAAWd,EAASe,GACxB,OAAO1B,KAAKK,OAAOoB,WAAWd,EAASe,EAC3C,CAcEC,SAA0BC,GAAyBC,MAAOC,EAAIT,IACrDrB,KAAKK,OAAOsB,SAASI,QAAQD,EAAIT,KAU1CW,kBAAmCJ,GAAyBC,MAAOH,EAAUO,IACpEjC,KAAKK,OAAO2B,kBAAkBD,QAAQL,EAAUO,KAUzDC,oBAAqCN,GAAyBC,MAAOH,EAAUL,IACtEc,EAAYC,oBAAoB,CACrCjC,gBAAiBH,KAAKG,gBACtBkC,OAAQ,UACRC,KAAM,OAAOtB,EAAeU,GAAWL","x_google_ignoreList":[0]}