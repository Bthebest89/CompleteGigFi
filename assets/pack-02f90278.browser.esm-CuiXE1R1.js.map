{"version":3,"mappings":"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","names":["CommonWrappableSchema","z","object","contractAddress","AddressOrEnsSchema","ERC20WrappableSchema","extend","quantity","AmountSchema","ERC721WrappableSchema","tokenId","BigNumberishSchema","ERC1155WrappableSchema","ERC20RewardSchema","omit","quantityPerReward","ERC721RewardSchema","ERC1155RewardSchema","ERC20RewardContentsSchema","totalRewards","default","ERC721RewardContentsSchema","ERC1155RewardContentsSchema","PackRewardsOutputSchema","erc20Rewards","array","erc721Rewards","erc1155Rewards","PackMetadataInputSchema","packMetadata","NFTInputOrUriSchema","rewardsPerPack","openStartTime","RawDateSchema","Date","PackVRF","featureName","FEATURE_PACK_VRF","name","constructor","network","address","storage","options","chainId","contractWrapper","arguments","length","undefined","ContractWrapper","IPackVRFAbi","this","events","ContractEvents","onNetworkUpdated","updateSignerOrProvider","getAddress","open","buildTransactionFunction","_this","async","amount","gasLimit","Transaction","fromContractWrapper","method","args","overrides","parse","receipt","id","BigNumber","from","parseLogs","logs","requestId","e","claimRewards","_this2","event","Error","rewards","rewardUnitsDistributed","parseRewards","reward","tokenType","tokenMetadata","fetchCurrencyMetadata","getProvider","assetContract","push","utils.formatUnits","totalAmount","decimals","toString","addPackOpenEventListener","callback","addEventListener","data","packId","opener","canClaimRewards","claimerAddress","resolveAddress","getSignerAddress","read","openAndClaim","sendTransaction","getLinkBalance","ERC20Abi","__vitePreload","__vite_default__","import","then","n","dV","__VITE_PRELOAD__","getLinkContract","balanceOf","transferLink","transfer","linkAddress","LINK_TOKEN_ADDRESS","contract","getSignerOrProvider","Erc20","Pack","StandardErc1155","static","PACK_CONTRACT_ROLES","vrf","assertEnabled","_vrf","abi","super","gasless","openzeppelin","useEOAForwarder","AbiSchema","metadata","ContractMetadata","PackContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","encoder","ContractEncoder","estimator","GasCostEstimator","interceptor","ContractInterceptor","owner","ContractOwner","detectVrf","get","erc1155","getAll","queryParams","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","getRoleHash","constants.AddressZero","getPackContents","contents","perUnitAmounts","i","div","create","signerAddress","createTo","prepare","metadataWithRewards","addPackContents","packContents","parsedContents","Promise","all","parseAsync","numOfRewardUnits","toPackContentArgs","to","uri","parsedMetadata","toAddress","uploadOrExtractURI","rewardsData","provider","erc20","totalQuantity","normalizePriceValue","mul","hasERC20Allowance","erc721","isTokenApprovedForTransfer","call","functionName","detectContractFeature"],"ignoreList":[0,1],"sources":["../../node_modules/@thirdweb-dev/sdk/dist/pack-29c3a58f.browser.esm.js","../../node_modules/@thirdweb-dev/sdk/dist/pack-02f90278.browser.esm.js"],"sourcesContent":["import { N as NFTInputOrUriSchema } from './setErc20Allowance-7f76f677.browser.esm.js';\nimport { cw as AmountSchema, b6 as BigNumberishSchema, b9 as AddressOrEnsSchema } from './index-33cd3415.browser.esm.js';\nimport { R as RawDateSchema } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { z } from 'zod';\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = /* @__PURE__ */(() => z.object({\n  contractAddress: AddressOrEnsSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC20WrappableSchema = /* @__PURE__ */(() => CommonWrappableSchema.extend({\n  quantity: AmountSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC721WrappableSchema = /* @__PURE__ */(() => CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC1155WrappableSchema = /* @__PURE__ */(() => CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = /* @__PURE__ */(() => ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = /* @__PURE__ */(() => ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = /* @__PURE__ */(() => ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n}))();\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = /* @__PURE__ */(() => ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n}))();\n\n/**\n * @internal\n */\nconst PackRewardsSchema = /* @__PURE__ */(() => z.object({\n  erc20Rewards: z.array(ERC20RewardSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardSchema).default([])\n}))();\n\n/**\n * @internal\n */\nconst PackRewardsOutputSchema = /* @__PURE__ */(() => z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n}))();\n\n/**\n * @internal\n */\nconst PackMetadataInputSchema = /* @__PURE__ */(() => PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nexport { ERC20WrappableSchema as E, PackRewardsSchema as P, ERC721WrappableSchema as a, ERC1155WrappableSchema as b, PackRewardsOutputSchema as c, PackMetadataInputSchema as d };\n","import { BigNumber, utils, constants } from 'ethers';\nimport { f as fetchCurrencyMetadata, C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-654a940b.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-9851c0eb.browser.esm.js';\nimport { dK as FEATURE_PACK_VRF, cs as ContractWrapper, aL as resolveAddress, aY as LINK_TOKEN_ADDRESS, dL as PACK_CONTRACT_ROLES, bj as AbiSchema, c3 as PackContractSchema, H as getRoleHash } from './index-33cd3415.browser.esm.js';\nimport { a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { a as ContractEvents, C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, d as detectContractFeature } from './contract-appuri-5c40af52.browser.esm.js';\nimport { i as isTokenApprovedForTransfer } from './marketplace-e3129e2f.browser.esm.js';\nimport { b as uploadOrExtractURI } from './QueryParams-32a56510.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-49e75547.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-a5888d37.browser.esm.js';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { E as Erc20 } from './erc-20-9a18a51c.browser.esm.js';\nimport { c as PackRewardsOutputSchema, d as PackMetadataInputSchema } from './pack-29c3a58f.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport './signature-d3ea643d.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport 'uuid';\nimport './erc-1155-7ce9bee1.browser.esm.js';\nimport 'fast-deep-equal';\nimport './drop-claim-conditions-e6f2abbf.browser.esm.js';\n\nclass PackVRF {\n  featureName = FEATURE_PACK_VRF.name;\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options, storage);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Open pack\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const amount = 1;\n   * const receipt = await contract.pack.open(tokenId, amount);\n   * ```\n   *\n   * @remarks\n   * Open a pack using Chainlink VRFs random number generation\n   * This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   *\n   * @param tokenId - the id of the pack to open\n   * @param amount - Optional: the amount of packs to open, defaults to 1\n   * @returns\n   * @twfeature PackVRF\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: receipt => {\n          let id = BigNumber.from(0);\n          try {\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n            id = event[0].args.requestId;\n          } catch (e) {}\n          return {\n            receipt,\n            id\n          };\n        }\n      });\n    };\n  })());\n\n  /**\n   * Claim the rewards from an opened pack\n   *\n   * @example\n   * ```javascript\n   * const rewards = await contract.pack.claimRewards();\n   * ```\n   *\n   * @remarks This will return the contents of the pack\n   * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns The random rewards from opening a pack\n   * @twfeature PackVRF\n   */\n  claimRewards = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function () {\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"claimRewards\",\n        args: [],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          return await _this2.parseRewards(rewards);\n        }\n      });\n    };\n  })());\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * ```\n   *\n   * @param callback - the listener to call when a pack is opened\n   * @returns A unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress - Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = await resolveAddress(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\n  }\n\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId - The id of the pack to open\n   * @param amount - Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit - Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns The balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n  async getLinkBalance() {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    return this.getLinkContract(ERC20Abi).balanceOf(this.contractWrapper.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount - the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n  async transferLink(amount) {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    await this.getLinkContract(ERC20Abi).transfer(this.contractWrapper.address, amount);\n  }\n  getLinkContract(ERC20Abi) {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers\nclass Pack extends StandardErc1155 {\n  static contractRoles = PACK_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        ...options.gasless,\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns The total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns  The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = utils.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = utils.formatUnits(BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet. See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  create = /* @__PURE__ */buildTransactionFunction(async metadataWithRewards => {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo.prepare(signerAddress, metadataWithRewards);\n  });\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack. See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  addPackContents = /* @__PURE__ */buildTransactionFunction(async (packId, packContents) => {\n    const [signerAddress, parsedContents] = await Promise.all([this.contractWrapper.getSignerAddress(), PackRewardsOutputSchema.parseAsync(packContents)]);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addPackContents\",\n      args: [packId, contents, numOfRewardUnits, signerAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackUpdated event not found\");\n        }\n        const id = event[0].args.packId;\n        return {\n          id: id,\n          receipt,\n          data: () => this.erc1155.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  createTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithRewards) => {\n    const [uri, parsedMetadata, toAddress] = await Promise.all([uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage), PackMetadataInputSchema.parseAsync(metadataWithRewards), resolveAddress(to)]);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createPack\",\n      args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, toAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackCreated event not found\");\n        }\n        const packId = event[0].args.packId;\n        return {\n          id: packId,\n          receipt,\n          data: () => this.erc1155.get(packId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      if (_this._vrf) {\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          const erc20Rewards = [];\n          const erc721Rewards = [];\n          const erc1155Rewards = [];\n          for (const reward of rewards) {\n            switch (reward.tokenType) {\n              case 0:\n                {\n                  const tokenMetadata = await fetchCurrencyMetadata(_this.contractWrapper.getProvider(), reward.assetContract);\n                  erc20Rewards.push({\n                    contractAddress: reward.assetContract,\n                    quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                  });\n                  break;\n                }\n              case 1:\n                {\n                  erc721Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString()\n                  });\n                  break;\n                }\n              case 2:\n                {\n                  erc1155Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString(),\n                    quantityPerReward: reward.totalAmount.toString()\n                  });\n                  break;\n                }\n            }\n          }\n          return {\n            erc20Rewards,\n            erc721Rewards,\n            erc1155Rewards\n          };\n        }\n      });\n    };\n  })());\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n\nexport { Pack };\n"],"file":"assets/pack-02f90278.browser.esm-CuiXE1R1.js"}