{"version":3,"file":"erc-1155-7ce9bee1.browser.esm-BSstTiNG.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/erc-1155-7ce9bee1.browser.esm.js"],"sourcesContent":["import { BigNumber, utils, constants } from 'ethers';\nimport { aL as resolveAddress, B as includesErrorMessage, d8 as isNode, cs as ContractWrapper, b9 as AddressOrEnsSchema, cw as AmountSchema, d9 as FEATURE_EDITION_CLAIM_CUSTOM, da as FEATURE_EDITION_CLAIM_CONDITIONS_V2, bg as CustomContractSchema, db as FEATURE_EDITION_SIGNATURE_MINTABLE, dc as getPrebuiltInfo, dd as FEATURE_EDITION_BURNABLE, de as FEATURE_EDITION_ENUMERABLE, df as FEATURE_EDITION_LAZY_MINTABLE_V2, dg as FEATURE_EDITION_REVEALABLE, dh as FEATURE_EDITION_BATCH_MINTABLE, di as FEATURE_EDITION_MINTABLE, dj as FEATURE_EDITION, x as ExtensionNotImplementedError, dk as FEATURE_EDITION_SUPPLY, n as NotFoundError, dl as FEATURE_EDITION_UPDATABLE_METADATA } from './index-33cd3415.browser.esm.js';\nimport { a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { d as detectContractFeature, h as hasFunction, C as ContractMetadata } from './contract-appuri-5c40af52.browser.esm.js';\nimport { u as uploadOrExtractURIs, D as DEFAULT_QUERY_ALL_COUNT, b as uploadOrExtractURI, F as FALLBACK_METADATA, f as fetchTokenMetadata } from './QueryParams-32a56510.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { z } from 'zod';\nimport { c as calculateClaimCost, D as DelayedReveal } from './contract-owner-49e75547.browser.esm.js';\nimport deepEqual from 'fast-deep-equal';\nimport { y as transformResultToClaimCondition, z as legacyContractModelToAbstract, A as newContractModelToAbstract, C as ClaimEligibility, D as convertQuantityToBigNumber, f as fetchSnapshotEntryForAddress, E as prepareClaim, F as SnapshotFormatVersion, H as processClaimConditionInputs, I as abstractContractModelToLegacy, J as abstractContractModelToNew, K as updateExistingClaimConditions, r as Signature1155PayloadInputWithTokenId, s as Signature1155PayloadOutput, w as MintRequest1155 } from './signature-d3ea643d.browser.esm.js';\nimport { i as isNativeToken, C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport invariant from 'tiny-invariant';\nimport { n as normalizePriceValue } from './normalizePriceValue-9851c0eb.browser.esm.js';\nimport { s as setErc20Allowance } from './setErc20Allowance-7f76f677.browser.esm.js';\n\n/**\n * Manages claim conditions for Edition Drop contracts\n * @erc1155\n * @public\n */\nclass DropErc1155ClaimConditions {\n  constructor(contractWrapper, metadata, storage) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns The claim condition metadata\n   */\n  async getActive(tokenId, options) {\n    const mc = await this.get(tokenId);\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(mc, 0, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false);\n  }\n  async get(tokenId, conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [tokenId, id]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [tokenId, id]);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns The claim conditions metadata\n   */\n  async getAll(tokenId, options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const claimCondition = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      const startId = claimCondition.currentStartId.toNumber();\n      const count = claimCondition.count.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(await this.get(tokenId, i));\n      }\n      const metadata = await this.metadata.get();\n      return Promise.all(conditions.map(c => transformResultToClaimCondition(c, 0, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false)));\n    } else {\n      return [await this.getActive(tokenId, options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if a particular NFT can currently be claimed by a given user.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(tokenId, quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    if (addressToCheck) {\n      addressToCheck = await resolveAddress(addressToCheck);\n    }\n    return (await this.getClaimIneligibilityReasons(tokenId, quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human-readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - the token id to check\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(tokenId, quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    const resolvedAddress = await resolveAddress(addressToCheck);\n    try {\n      claimCondition = await this.getActive(tokenId);\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\") || includesErrorMessage(err, \"DropNoActiveCondition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n        return reasons;\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(tokenId, resolvedAddress);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(tokenId, quantity, false, resolvedAddress);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [activeConditionIndex, resolvedAddress, tokenId, quantity, claimVerification.proofs, claimVerification.maxClaimable]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [tokenId, resolvedAddress, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            }]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.read(\"verifyClaim\", [tokenId, resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n            await this.contractWrapper.read(\"verifyClaim\", [activeConditionIndex, resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason || e.errorName : e);\n          const reason = e.reason || e.errorName;\n          switch (reason) {\n            case \"!Qty\":\n            case \"DropClaimExceedLimit\":\n              reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n              break;\n            case \"!PriceOrCurrency\":\n            case \"DropClaimInvalidTokenPrice\":\n              reasons.push(ClaimEligibility.WrongPriceOrCurrency);\n              break;\n            case \"!MaxSupply\":\n            case \"DropClaimExceedMaxSupply\":\n              reasons.push(ClaimEligibility.NotEnoughSupply);\n              break;\n            case \"cant claim yet\":\n            case \"DropClaimNotStarted\":\n              reasons.push(ClaimEligibility.ClaimPhaseNotStarted);\n              break;\n            default:\n              {\n                reasons.push(ClaimEligibility.AddressNotAllowed);\n                break;\n              }\n          }\n          return reasons;\n        }\n      }\n    }\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      let claimedSupply = BigNumber.from(0);\n      let maxClaimable = convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, 0);\n      try {\n        claimedSupply = await this.getSupplyClaimedByWallet(tokenId, resolvedAddress);\n      } catch (e) {\n        // no-op\n      }\n      if (allowListEntry) {\n        maxClaimable = convertQuantityToBigNumber(allowListEntry.maxClaimable, 0);\n      }\n      if (maxClaimable.gt(0) && maxClaimable.lt(claimedSupply.add(quantity))) {\n        reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n        return reasons;\n      }\n\n      // if there is no allowlist, or if there is an allowlist and the address is not in it\n      // if maxClaimable is 0, we consider it as the address is not allowed\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (maxClaimable.lte(claimedSupply) || maxClaimable.eq(0)) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims\n    let [lastClaimedTimestamp, timestampForNextClaim] = [BigNumber.from(0), BigNumber.from(0)];\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [tokenId, activeConditionIndex, resolvedAddress]);\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [tokenId, resolvedAddress]);\n    }\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n      // contract will return MaxUint256 if user has already claimed and cannot claim again\n      if (timestampForNextClaim.eq(constants.MaxUint256)) {\n        reasons.push(ClaimEligibility.AlreadyClaimed);\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n      return reasons;\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(quantity);\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(resolvedAddress);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const IERC20ABI = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, IERC20ABI, {}, this.storage);\n        const balance = await erc20.read(\"balanceOf\", [resolvedAddress]);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param tokenId - the token ID to check\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(tokenId, claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(tokenId, claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const metadata = await this.metadata.get();\n      const resolvedAddress = await resolveAddress(claimerAddress);\n      return await fetchSnapshotEntryForAddress(resolvedAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the total supply claimed by a specific wallet\n   * @param walletAddress - the wallet address to check\n   * @returns The total supply claimed\n   */\n  async getSupplyClaimedByWallet(tokenId, walletAddress) {\n    const resolvedAddress = await resolveAddress(walletAddress);\n    if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [tokenId, resolvedAddress]);\n    }\n    if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const activeClaimConditionId = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [tokenId, activeClaimConditionId, resolvedAddress]);\n    }\n    throw new Error(\"This contract does not support the getSupplyClaimedByWallet function\");\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set claim conditions on a single NFT\n   *\n   * @remarks Sets the public mint conditions that need to be fulfilled by users to claim a particular NFT in this contract.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await dropContract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   *\n   * @param tokenId - The id of the NFT to set the claim conditions on\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  set = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId, claimConditionInputs) {\n      let resetClaimEligibilityForAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return _this.setBatch.prepare([{\n        tokenId,\n        claimConditions: claimConditionInputs\n      }], resetClaimEligibilityForAll);\n    };\n  })());\n\n  /**\n   * Set claim conditions on multiple NFTs at once\n   *\n   * @remarks Sets the claim conditions that need to be fulfilled by users to claim the given NFTs in this contract.\n   *\n   * @example\n   * ```javascript\n   * const claimConditionsForTokens = [\n   *   {\n   *     tokenId: 0,\n   *     claimConditions: [{\n   *       startTime: new Date(), // start the claim phase now\n   *       maxClaimableSupply: 2, // limit how many mints for this tokenId\n   *       price: 0.01, // price for this tokenId\n   *       snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *     }]\n   *   },\n   *   {\n   *     tokenId: 1,\n   *     claimConditions: [{\n   *       startTime: new Date(),\n   *       price: 0.08, // different price for this tokenId\n   *     }]\n   *   },\n   * ];\n   *\n   * await dropContract.claimConditions.setBatch(claimConditionsForTokens);\n   * ```\n   *\n   * @param claimConditionsForToken - The claim conditions for each NFT\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  setBatch = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (claimConditionsForToken) {\n      let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const merkleInfo = {};\n      const processedClaimConditions = await Promise.all(claimConditionsForToken.map(async _ref => {\n        let {\n          tokenId,\n          claimConditions\n        } = _ref;\n        // sanitize for single phase deletions\n        let claimConditionsProcessed = claimConditions;\n        if (_this2.isLegacySinglePhaseDrop(_this2.contractWrapper)) {\n          resetClaimEligibilityForAll = true;\n          if (claimConditions.length === 0) {\n            claimConditionsProcessed = [{\n              startTime: new Date(0),\n              currencyAddress: constants.AddressZero,\n              price: 0,\n              maxClaimableSupply: 0,\n              maxClaimablePerWallet: 0,\n              waitInSeconds: 0,\n              merkleRootHash: utils.hexZeroPad([0], 32),\n              snapshot: []\n            }];\n          } else if (claimConditions.length > 1) {\n            throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n          }\n        }\n        // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n        if (_this2.isNewSinglePhaseDrop(_this2.contractWrapper) || _this2.isNewMultiphaseDrop(_this2.contractWrapper)) {\n          claimConditionsProcessed.forEach(cc => {\n            if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n              throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\" + \"\\n\\nex:\\n\" + \"contract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n            }\n            if (cc.snapshot && cc.snapshot.length > 0 && cc.maxClaimablePerWallet?.toString() === \"0\" && cc.snapshot.map(s => {\n              if (typeof s === \"string\") {\n                return 0;\n              } else {\n                return Number(s.maxClaimable?.toString() || 0);\n              }\n            }).reduce((acc, current) => {\n              return acc + current;\n            }, 0) === 0) {\n              throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n            }\n          });\n        }\n        // process inputs\n        const {\n          snapshotInfos,\n          sortedConditions\n        } = await processClaimConditionInputs(claimConditionsProcessed, 0, _this2.contractWrapper.getProvider(), _this2.storage, _this2.getSnapshotFormatVersion());\n        snapshotInfos.forEach(s => {\n          merkleInfo[s.merkleRoot] = s.snapshotUri;\n        });\n        return {\n          tokenId,\n          sortedConditions\n        };\n      }));\n      const metadata = await _this2.metadata.get();\n      const encoded = [];\n\n      // keep the old merkle roots from other tokenIds\n      for (const key of Object.keys(metadata.merkle || {})) {\n        merkleInfo[key] = metadata.merkle[key];\n      }\n\n      // upload new merkle roots to snapshot URIs if updated\n      if (!deepEqual(metadata.merkle, merkleInfo)) {\n        const mergedMetadata = await _this2.metadata.parseInputMetadata({\n          ...metadata,\n          merkle: merkleInfo\n        });\n        // using internal method to just upload, avoids one contract call\n        const contractURI = await _this2.metadata._parseAndUploadMetadata(mergedMetadata);\n        if (hasFunction(\"setContractURI\", _this2.contractWrapper)) {\n          const contractEncoder = new ContractEncoder(_this2.contractWrapper);\n          encoded.push(contractEncoder.encode(\"setContractURI\", [contractURI]));\n        } else {\n          throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n        }\n      }\n      processedClaimConditions.forEach(_ref2 => {\n        let {\n          tokenId,\n          sortedConditions\n        } = _ref2;\n        const baseContractEncoder = new ContractEncoder(_this2.contractWrapper);\n        if (_this2.isLegacySinglePhaseDrop(_this2.contractWrapper)) {\n          const legacyContractEncoder = new ContractEncoder(_this2.contractWrapper);\n          encoded.push(legacyContractEncoder.encode(\"setClaimConditions\", [tokenId, abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n        } else if (_this2.isLegacyMultiPhaseDrop(_this2.contractWrapper)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n        } else if (_this2.isNewSinglePhaseDrop(_this2.contractWrapper)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n        } else if (_this2.isNewMultiphaseDrop(_this2.contractWrapper)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n        } else {\n          throw new Error(\"Contract does not support claim conditions\");\n        }\n      });\n      if (hasFunction(\"multicall\", _this2.contractWrapper)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this2.contractWrapper,\n          method: \"multicall\",\n          args: [encoded]\n        });\n      }\n      throw new Error(\"Contract does not support multicall\");\n    };\n  })());\n\n  /**\n   * Update a single claim condition with new data.\n   * @param tokenId - the token id to update\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (tokenId, index, claimConditionInput) => {\n    const existingConditions = await this.getAll(tokenId);\n    const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n    return await this.set.prepare(tokenId, newConditionInputs);\n  });\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns  `overrides` and `proofs` as an object.\n   */\n  async prepareClaim(tokenId, quantity, checkERC20Allowance, address) {\n    const addressToClaim = await resolveAddress(address ? address : await this.contractWrapper.getSignerAddress());\n    return prepareClaim(addressToClaim, quantity, await this.getActive(tokenId), async () => (await this.metadata.get()).merkle, 0, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(tokenId, destinationAddress, quantity, claimVerification) {\n    const resolvedAddress = await resolveAddress(destinationAddress);\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, utils.toUtf8Bytes(\"\")];\n    }\n    return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    if (options?.pricePerToken) {\n      throw new Error(\"Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(tokenId, quantity, options?.checkERC20Allowance || true);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: await this.getClaimArguments(tokenId, destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\n/**\n * @internal\n */\nconst AirdropAddressInput = /* @__PURE__ */(() => z.object({\n  address: AddressOrEnsSchema,\n  quantity: AmountSchema.default(1)\n}))();\n\n/**\n * @internal\n */\nconst AirdropInputSchema = /* @__PURE__ */(() => z.union([z.array(z.string()).transform(async strings => await Promise.all(strings.map(address => AirdropAddressInput.parseAsync({\n  address\n})))), z.array(AirdropAddressInput)]))();\n\n/**\n * Configure and claim ERC1155 NFTs\n * @remarks Manage claim phases and claim ERC1155 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.drop.claim.to(\"0x...\", tokenId, quantity);\n * ```\n */\nclass ERC1155Claimable {\n  featureName = FEATURE_EDITION_CLAIM_CUSTOM.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    let overrides = {};\n    if (options && options.pricePerToken) {\n      overrides = await calculateClaimCost(this.contractWrapper, options.pricePerToken, quantity, options.currencyAddress, options.checkERC20Allowance);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: [await resolveAddress(destinationAddress), tokenId, quantity],\n      overrides\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @returns  Receipt for the transaction\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n    return await this.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n  });\n}\n\n/**\n * Configure and claim ERC1155 NFTs\n * @remarks Manage claim phases and claim ERC1155 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc1155.claim(tokenId, quantity);\n * await contract.erc1155.claimConditions.getActive(tokenId);\n * ```\n */\nclass Erc1155ClaimableWithConditions {\n  featureName = FEATURE_EDITION_CLAIM_CONDITIONS_V2.name;\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropErc1155ClaimConditions(contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @returns  Receipt for the transaction\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n    return await this.conditions.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n  });\n}\n\n/**\n * Enables generating dynamic ERC1155 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @erc1155\n * @public\n */\nclass Erc1155SignatureMintable {\n  featureName = FEATURE_EDITION_SIGNATURE_MINTABLE.name;\n  constructor(contractWrapper, storage, roles) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc1155.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mint(signedPayload);\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc1155SignatureMintable.generate}\n   * @twfeature ERC1155SignatureMintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const [message, overrides] = await Promise.all([this.mapPayloadToContractStruct(mintRequest), this.contractWrapper.getCallOverrides()]);\n    // TODO: Transaction Sequence Pattern\n    await setErc20Allowance(this.contractWrapper, message.pricePerToken.mul(message.quantity), mintRequest.currencyAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintWithSignature\",\n      args: [message, signature],\n      overrides,\n      parse: receipt => {\n        const t = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n        if (t.length === 0) {\n          throw new Error(\"No MintWithSignature event found\");\n        }\n        const id = t[0].args.tokenIdMinted;\n        return {\n          id,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a batch of payloads to sign in the `generateBatch()` documentation\n   * const signedPayloads = contract.erc1155.signature.generateBatch(payloads);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mintBatch(signedPayloads);\n   * ```\n   *\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC1155SignatureMintable\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n    const contractStructs = await Promise.all(signedPayloads.map(s => this.mapPayloadToContractStruct(s.payload)));\n    const contractPayloads = signedPayloads.map((s, index) => {\n      const message = contractStructs[index];\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    });\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = contractPayloads.map(p => {\n      return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n    });\n    if (hasFunction(\"multicall\", this.contractWrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n          if (events.length === 0) {\n            throw new Error(\"No MintWithSignature event found\");\n          }\n          return events.map(log => ({\n            id: log.args.tokenIdMinted,\n            receipt\n          }));\n        }\n      });\n    } else {\n      throw new Error(\"Multicall not supported on this contract!\");\n    }\n  });\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC1155SignatureMintable\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.erc1155.signature.generate(payload);\n   * // Now you can verify that the payload is valid\n   * const isValid = await contract.erc1155.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint an NFT dynamically.\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc1155.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns The signed payload and the corresponding signature\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generate(payloadToSign) {\n    const payload = {\n      ...payloadToSign,\n      tokenId: constants.MaxUint256\n    };\n    return this.generateFromTokenId(payload);\n  }\n\n  /**\n   * Generate a signature that can be used to mint additionally supply to an existing NFT.\n   *\n   * @remarks Takes in a payload with the token ID of an existing NFT, and signs it with your private key. The generated signature can then be used to mint additional supply to the NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   tokenId: 0, // Instead of metadata, we specify the token ID of the NFT to mint supply to\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc1155.signature.generateFromTokenId(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns The signed payload and the corresponding signature\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateFromTokenId(payloadToSign) {\n    const payloads = await this.generateBatchFromTokenIds([payloadToSign]);\n    return payloads[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many new NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns An array of payloads and signatures\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateBatch(payloadsToSign) {\n    const payloads = payloadsToSign.map(payload => ({\n      ...payload,\n      tokenId: constants.MaxUint256\n    }));\n    return this.generateBatchFromTokenIds(payloads);\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint new NFTs or additionally supply to existing NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generateFromTokenId}\n   *\n   * @param payloadsToSign - the payloads to sign with tokenIds specified\n   * @returns An array of payloads and signatures\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateBatchFromTokenIds(payloadsToSign) {\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    await this.roles?.verify([\"minter\"], await signer.getAddress());\n    const parsedRequests = await Promise.all(payloadsToSign.map(m => Signature1155PayloadInputWithTokenId.parseAsync(m)));\n    const metadatas = parsedRequests.map(r => r.metadata);\n    const [uris, chainId, contractInfo] = await Promise.all([uploadOrExtractURIs(metadatas, this.storage), this.contractWrapper.getChainID(), getPrebuiltInfo(this.contractWrapper.address, this.contractWrapper.getProvider())]);\n    const finalPayloads = await Promise.all(parsedRequests.map((m, i) => Signature1155PayloadOutput.parseAsync({\n      ...m,\n      uri: uris[i]\n    })));\n    const contractStructs = await Promise.all(finalPayloads.map(finalPayload => this.mapPayloadToContractStruct(finalPayload)));\n    const isLegacyContract = contractInfo?.type === \"TokenERC1155\";\n    const signatures = await Promise.all(contractStructs.map(contractStruct => this.contractWrapper.signTypedData(signer, {\n      name: isLegacyContract ? \"TokenERC1155\" : \"SignatureMintERC1155\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.contractWrapper.address\n    }, {\n      MintRequest: MintRequest1155\n    },\n    // TYPEHASH\n    contractStruct)));\n    return signatures.map((signature, index) => ({\n      payload: finalPayloads[index],\n      signature: signature.toString()\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns  The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      tokenId: mintRequest.tokenId,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient\n    };\n  }\n}\n\nclass Erc1155Burnable {\n  featureName = FEATURE_EDITION_BURNABLE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from the connected wallet\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of the NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.edition.burn.tokens(tokenId, amount);\n   * ```\n   */\n  tokens = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    const account = await this.contractWrapper.getSignerAddress();\n    return this.from.prepare(account, tokenId, amount);\n  });\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from a specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenId - the tokenId to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of this NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.edition.burn.from(account, tokenId, amount);\n   * ```\n   */\n  from = /* @__PURE__ */buildTransactionFunction(async (account, tokenId, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burn\",\n      args: [await resolveAddress(account), tokenId, amount]\n    });\n  });\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the connected wallet\n   *\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.edition.burn.batch(tokenIds, amounts);\n   * ```\n   */\n  batch = /* @__PURE__ */buildTransactionFunction(async (tokenIds, amounts) => {\n    const account = await this.contractWrapper.getSignerAddress();\n    return this.batchFrom.prepare(account, tokenIds, amounts);\n  });\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.edition.burn.batchFrom(account, tokenIds, amounts);\n   * ```\n   */\n  batchFrom = /* @__PURE__ */buildTransactionFunction(async (account, tokenIds, amounts) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burnBatch\",\n      args: [await resolveAddress(account), tokenIds, amounts]\n    });\n  });\n}\n\n/**\n * List ERC1155 NFTs\n * @remarks Easily list all the NFTs in a ERC1155 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.edition.query.all();\n * ```\n * @public\n */\n\nclass Erc1155Enumerable {\n  featureName = FEATURE_EDITION_ENUMERABLE.name;\n  constructor(erc1155, contractWrapper) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.edition.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async all(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.totalCount()).toNumber(), start + count);\n    return await Promise.all([...Array(maxId - start).keys()].map(i => this.erc1155.get((start + i).toString())));\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns The total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n  }\n\n  /**\n   * Get the supply of token for a given tokenId.\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns The total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCirculatingSupply(tokenId) {\n    return await this.contractWrapper.read(\"totalSupply\", [tokenId]);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.edition.query.owned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async owned(walletAddress, queryParams) {\n    const [address, maxId] = await Promise.all([resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress())), this.contractWrapper.read(\"nextTokenIdToMint\", [])]);\n    const balances = await this.contractWrapper.read(\"balanceOfBatch\", [Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys())]);\n    let ownedBalances = balances.map((b, i) => {\n      return {\n        tokenId: i,\n        balance: b\n      };\n    }).filter(b => b.balance.gt(0));\n    if (queryParams) {\n      const start = queryParams?.start || 0;\n      const count = queryParams?.count || DEFAULT_QUERY_ALL_COUNT;\n      ownedBalances = ownedBalances.slice(start, start + count);\n    }\n    const nfts = (await Promise.all(ownedBalances.map(item => this.erc1155.get(item.tokenId.toString())))).map((editionMetadata, index) => ({\n      ...editionMetadata,\n      owner: address,\n      quantityOwned: ownedBalances[index].balance.toString()\n    }));\n    return nfts;\n  }\n}\n\nclass Erc1155LazyMintable {\n  featureName = FEATURE_EDITION_LAZY_MINTABLE_V2.name;\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.edition.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.edition.drop.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  constructor(erc1155, contractWrapper, storage) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.revealer = this.detectErc1155Revealable();\n  }\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  lazyMint = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    const startFileNumber = await this.erc1155.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    // ensure baseUri is the same for the entire batch\n    const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n    for (let i = 0; i < batch.length; i++) {\n      const uri = batch[i].substring(0, batch[i].lastIndexOf(\"/\"));\n      if (baseUri !== uri) {\n        throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n      }\n    }\n    const parse = receipt => {\n      const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n      const startingIndex = event[0].args.startTokenId;\n      const endingIndex = event[0].args.endTokenId;\n      const results = [];\n      for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n        results.push({\n          id,\n          receipt,\n          data: () => this.erc1155.getTokenMetadata(id)\n        });\n      }\n      return results;\n    };\n    const prebuiltInfo = await getPrebuiltInfo(this.contractWrapper.address, this.contractWrapper.getProvider());\n    if (this.isLegacyEditionDropContract(this.contractWrapper, prebuiltInfo)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"lazyMint\",\n        args: [batch.length, `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`],\n        parse\n      });\n    } else {\n      // new contracts/extensions have support for delayed reveal that adds an extra parameter to lazyMint\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"lazyMint\",\n        args: [batch.length, `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`, utils.toUtf8Bytes(\"\")],\n        parse\n      });\n    }\n  });\n  updateMetadata = /* @__PURE__ */buildTransactionFunction(async (tokenId, metadata, options) => {\n    const batchCount = await this.contractWrapper.read(\"getBaseURICount\", []);\n    if (batchCount.eq(0)) {\n      throw new Error(\"No base URI set. Please set a base URI before updating metadata\");\n    }\n    const targetTokenId = BigNumber.from(tokenId);\n    let startTokenId = BigNumber.from(0);\n    let endTokenId = BigNumber.from(0);\n    let batchIndex = 0;\n    for (let i = 0; i < batchCount.toNumber(); i++) {\n      batchIndex = i;\n      endTokenId = await this.contractWrapper.read(\"getBatchIdAtIndex\", [batchIndex]);\n      if (endTokenId.gt(targetTokenId)) {\n        break;\n      }\n      startTokenId = endTokenId;\n    }\n    // for the entire batch,\n    // 1. download all of the metadata as a list of nft metadata\n    const range = Array.from({\n      length: endTokenId.sub(startTokenId).toNumber()\n    }, (v, k) => k + startTokenId.toNumber());\n    const metadatas = await Promise.all(range.map(id => this.erc1155.getTokenMetadata(id)));\n    // 2. replace the metadata of the tokenId desired\n    const newMetadatas = [];\n    for (let i = 0; i < metadatas.length; i++) {\n      const {\n        id,\n        uri,\n        ...rest\n      } = metadatas[i];\n      if (BigNumber.from(targetTokenId).eq(BigNumber.from(id))) {\n        newMetadatas.push(metadata);\n      } else {\n        newMetadatas.push(rest);\n      }\n    }\n    // 3. re-upload the entire batch with the correct starting number\n    const batch = await uploadOrExtractURIs(newMetadatas, this.storage, startTokenId.toNumber(), options);\n    const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n    // 4. update the base uri for the entire batch\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      // TODO contract detection\n      method: \"updateBatchBaseURI\",\n      args: [batchIndex, `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  detectErc1155Revealable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Revealable\")) {\n      return new DelayedReveal(this.contractWrapper, this.storage, FEATURE_EDITION_REVEALABLE.name, () => this.erc1155.nextTokenIdToMint());\n    }\n    return undefined;\n  }\n  isLegacyEditionDropContract(contractWrapper, info) {\n    return info && info.type === \"DropERC1155\" && info.version < 3 || false;\n  }\n}\n\n/**\n * Mint Many ERC1155 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.batch.to(walletAddress, [nftMetadataWithSupply1, nftMetadataWithSupply2, ...]);\n * ```\n * @public\n */\n\nclass Erc1155BatchMintable {\n  featureName = FEATURE_EDITION_BATCH_MINTABLE.name;\n  constructor(erc1155, contractWrapper, storage) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.edition.mint.batch.to(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    const metadatas = metadataWithSupply.map(a => a.metadata);\n    const supplies = metadataWithSupply.map(a => a.supply);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const resolvedAddress = await resolveAddress(to);\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = await Promise.all(uris.map(async (uri, index) => contractEncoder.encode(\"mintTo\", [resolvedAddress, constants.MaxUint256, uri, supplies[index]])));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"TokensMinted\", receipt.logs);\n        if (events.length === 0 || events.length < metadatas.length) {\n          throw new Error(\"TokenMinted event not found, minting failed\");\n        }\n        return events.map(e => {\n          const id = e.args.tokenIdMinted;\n          return {\n            id,\n            receipt,\n            data: () => this.erc1155.get(id)\n          };\n        });\n      }\n    });\n  });\n}\n\n/**\n * Mint ERC1155 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc1155Mintable {\n  featureName = FEATURE_EDITION_MINTABLE.name;\n\n  /**\n   * Batch mint Tokens to many addresses\n   */\n\n  constructor(erc1155, contractWrapper, storage) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc1155BatchMintable();\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.edition.mint.to(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   *\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    const tx = await this.getMintTransaction(to, metadataWithSupply);\n    tx.setParse(receipt => {\n      const event = this.contractWrapper.parseLogs(\"TransferSingle\", receipt?.logs);\n      if (event.length === 0) {\n        throw new Error(\"TransferSingleEvent event not found\");\n      }\n      const id = event[0].args.id;\n      return {\n        id,\n        receipt,\n        data: () => this.erc1155.get(id.toString())\n      };\n    });\n    return tx;\n  });\n\n  /**\n   * @deprecated Use `contract.erc1155.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, metadataWithSupply) {\n    const uri = await uploadOrExtractURI(metadataWithSupply.metadata, this.storage);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [await resolveAddress(to), constants.MaxUint256, uri, metadataWithSupply.supply]\n    });\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   * const tokenId = 0;\n   * const additionalSupply = 1000;\n   *\n   * const tx = await contract.edition.mint.additionalSupplyTo(toAddress, tokenId, additionalSupply);\n   * ```\n   */\n  additionalSupplyTo = /* @__PURE__ */buildTransactionFunction(async (to, tokenId, additionalSupply) => {\n    const metadata = await this.erc1155.getTokenMetadata(tokenId);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [await resolveAddress(to), tokenId, metadata.uri, additionalSupply],\n      parse: receipt => {\n        return {\n          id: BigNumber.from(tokenId),\n          receipt,\n          data: () => this.erc1155.get(tokenId)\n        };\n      }\n    });\n  });\n  detectErc1155BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155BatchMintable\")) {\n      return new Erc1155BatchMintable(this.erc1155, this.contractWrapper, this.storage);\n    }\n  }\n}\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc1155.transfer(walletAddress, tokenId, quantity);\n * ```\n * @erc1155\n * @public\n */\nclass Erc1155 {\n  featureName = FEATURE_EDITION.name;\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.query = this.detectErc1155Enumerable();\n    this.mintable = this.detectErc1155Mintable();\n    this.burnable = this.detectErc1155Burnable();\n    this.lazyMintable = this.detectErc1155LazyMintable();\n    this.signatureMintable = this.detectErc1155SignatureMintable();\n    this.claimCustom = this.detectErc1155Claimable();\n    this.claimWithConditions = this.detectErc1155ClaimableWithConditions();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc1155.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   * @twfeature ERC1155\n   */\n  async get(tokenId) {\n    const [supply, metadata] = await Promise.all([this.contractWrapper.read(\"totalSupply\", [tokenId]).catch(() => BigNumber.from(0)), this.getTokenMetadata(tokenId).catch(() => ({\n      id: tokenId.toString(),\n      uri: \"\",\n      ...FALLBACK_METADATA\n    }))]);\n    return {\n      owner: constants.AddressZero,\n      metadata,\n      type: \"ERC1155\",\n      supply: supply.toString()\n    };\n  }\n\n  /**\n   * Get the total supply of a specific token\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc1155.totalSupply(tokenId);\n   * ```\n   * @param tokenId - The token ID to get the total supply of\n   * @returns The total supply\n   * @twfeature ERC1155\n   */\n  async totalSupply(tokenId) {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Supply\")) {\n      return await this.contractWrapper.read(\"totalSupply\", [tokenId]);\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_EDITION_SUPPLY);\n    }\n  }\n\n  /**\n   * Get NFT balance of a specific wallet\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.erc1155.balanceOf(walletAddress, tokenId);\n   * ```\n   * @twfeature ERC1155\n   */\n  async balanceOf(address, tokenId) {\n    return await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address), tokenId]);\n  }\n\n  /**\n   * Get NFT balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress(), tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return await this.contractWrapper.read(\"isApprovedForAll\", [await resolveAddress(address), await resolveAddress(operator)]);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.erc1155.transfer(toAddress, tokenId, amount);\n   * ```\n   * @twfeature ERC1155\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      const from = await _this.contractWrapper.getSignerAddress();\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"safeTransferFrom\",\n        args: [from, await resolveAddress(to), tokenId, amount, data]\n      });\n    };\n  })());\n\n  /**\n   * Transfer multiple NFTs\n   *\n   * @remarks Transfer multiple NFTs from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * // The token IDs of the NFTs you want to send\n   * const tokenIds = [0, 1, 2];\n   * // How many copies of the NFTs to transfer\n   * const amounts = [1, 2, 3];\n   * await contract.erc1155.transferBatch(toAddress, tokenIds, amounts);\n   * ```\n   *\n   * @twfeature ERC1155BatchTransferable\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (to, tokenIds, amounts, fromAddress) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      const from = fromAddress ? await resolveAddress(fromAddress) : await _this2.contractWrapper.getSignerAddress();\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"safeBatchTransferFrom\",\n        args: [from, await resolveAddress(to), tokenIds, amounts, data]\n      });\n    };\n  })());\n\n  /**\n   * Transfer an NFT from a specific wallet\n   *\n   * @remarks Transfer an NFT from a specific wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.erc1155.transfer(toAddress, tokenId, amount);\n   * ```\n   * @twfeature ERC1155\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this3 = this;\n    return async function (from, to, tokenId, amount) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this3.contractWrapper,\n        method: \"safeTransferFrom\",\n        args: [await resolveAddress(from), await resolveAddress(to), tokenId, amount, data]\n      });\n    };\n  })());\n\n  /**\n   * Set approval for all NFTs\n   * @remarks Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @example\n   * ```javascript\n   * const operator = \"{{wallet_address}}\";\n   * await contract.erc1155.setApprovalForAll(operator, true);\n   * ```\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   * @twfeature ERC1155\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setApprovalForAll\",\n      args: [operator, approved]\n    });\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.erc1155.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.erc1155.airdrop(tokenId, addresses);\n   * ```\n   * @twfeature ERC1155BatchTransferable\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this4 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      const from = fromAddress ? await resolveAddress(fromAddress) : await _this4.contractWrapper.getSignerAddress();\n      const balanceOf = await _this4.balanceOf(from, tokenId);\n      const input = await AirdropInputSchema.parseAsync(addresses);\n      const totalToAirdrop = input.reduce((prev, curr) => {\n        return BigNumber.from(prev).add(BigNumber.from(curr?.quantity || 1));\n      }, BigNumber.from(0));\n      if (balanceOf.lt(BigNumber.from(totalToAirdrop))) {\n        throw new Error(`The caller owns ${balanceOf.toString()} NFTs, but wants to airdrop ${totalToAirdrop.toString()} NFTs.`);\n      }\n      const contractEncoder = new ContractEncoder(_this4.contractWrapper);\n      const encoded = input.map(_ref => {\n        let {\n          address: to,\n          quantity\n        } = _ref;\n        return contractEncoder.encode(\"safeTransferFrom\", [from, to, tokenId, quantity, data]);\n      });\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this4.contractWrapper,\n        method: \"multicall\",\n        args: [encoded]\n      });\n    };\n  })());\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  async nextTokenIdToMint() {\n    if (hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n    } else {\n      throw new Error(\"Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint\");\n    }\n  }\n\n  ////// ERC1155 Enumerable Extension //////\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.erc1155.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   * @twfeature ERC1155Enumerable\n   */\n  async getAll(queryParams) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).all(queryParams);\n  }\n\n  /**\n   * Get the total number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   * @example\n   * ```javascript\n   * const count = await contract.erc1155.totalCount();\n   * console.log(count);\n   * ```\n   * @returns The total number of NFTs minted in this contract\n   * @public\n   * @twfeature ERC1155Enumerable\n   */\n  async totalCount() {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).totalCount();\n  }\n\n  /**\n   * Get the total supply of a specific NFT\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns The total number of NFTs minted in this contract\n   * @public\n   * @twfeature ERC1155Enumerable\n   */\n  async totalCirculatingSupply(tokenId) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).totalCirculatingSupply(tokenId);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.erc1155.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   * @twfeature ERC1155Enumerable\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).owned(walletAddress, queryParams);\n  }\n\n  ////// ERC1155 Mintable Extension //////\n\n  /**\n   * Mint an NFT\n   *\n   * @remarks Mint an NFT with a limited supply to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.erc1155.mint(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC1155Mintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n    return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), metadataWithSupply);\n  });\n\n  /**\n   * Mint an NFT to a specific wallet\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.erc1155.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC1155Mintable\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (receiver, metadataWithSupply) => {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).to.prepare(receiver, metadataWithSupply);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.erc1155.mint.prepare(...args)` instead\n   * @twfeature ERC1155Mintable\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).getMintTransaction(receiver, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT\n   * @remarks Increase the supply of an existing NFT and mint it to the connected wallet address\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const additionalSupply = 1000;\n   * await contract.erc1155.mintAdditionalSupply(tokenId, additionalSupply);\n   * ```\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   * @twfeature ERC1155Mintable\n   */\n  mintAdditionalSupply = /* @__PURE__ */buildTransactionFunction(async (tokenId, additionalSupply) => {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).additionalSupplyTo.prepare(await this.contractWrapper.getSignerAddress(), tokenId, additionalSupply);\n  });\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   * @twfeature ERC1155Mintable\n   */\n  mintAdditionalSupplyTo = /* @__PURE__ */buildTransactionFunction(async (receiver, tokenId, additionalSupply) => {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).additionalSupplyTo.prepare(receiver, tokenId, additionalSupply);\n  });\n\n  ////// ERC1155 BatchMintable Extension //////\n\n  /**\n   * Mint multiple NFTs at once\n   *\n   * @remarks Mint multiple different NFTs with limited supplies to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.erc1155.mintBatch(metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC1155BatchMintable\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n    return this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(), metadataWithSupply);\n  });\n\n  /**\n   * Mint multiple NFTs at once to a specific wallet\n   *\n   * @remarks Mint multiple different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.erc1155.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC1155BatchMintable\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (receiver, metadataWithSupply) => {\n    return assertEnabled(this.mintable?.batch, FEATURE_EDITION_BATCH_MINTABLE).to.prepare(receiver, metadataWithSupply);\n  });\n\n  ////// ERC1155 Burnable Extension //////\n\n  /**\n   * Burn NFTs\n   *\n   * @remarks Burn the specified NFTs from the connected wallet\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of the NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.erc1155.burn(tokenId, amount);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).tokens.prepare(tokenId, amount);\n  });\n\n  /**\n   * Burn NFTs from a specific wallet\n   *\n   * @remarks Burn the specified NFTs from a specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenId - the tokenId to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of this NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.erc1155.burnFrom(account, tokenId, amount);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (account, tokenId, amount) => {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).from.prepare(account, tokenId, amount);\n  });\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the connected wallet\n   *\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.erc1155.burnBatch(tokenIds, amounts);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  burnBatch = /* @__PURE__ */buildTransactionFunction(async (tokenIds, amounts) => {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).batch.prepare(tokenIds, amounts);\n  });\n\n  /**\n   * Burn a batch of NFTs from a specific wallet\n   *\n   * @remarks Burn the batch NFTs from the specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.erc1155.burnBatchFrom(account, tokenIds, amounts);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  burnBatchFrom = /* @__PURE__ */buildTransactionFunction(async (account, tokenIds, amounts) => {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).batchFrom.prepare(account, tokenIds, amounts);\n  });\n\n  ////// ERC721 LazyMint Extension //////\n\n  /**\n   * Lazy mint NFTs\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   * @twfeature ERC1155LazyMintableV1 | ERC1155LazyMintableV2\n   */\n  lazyMint = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return assertEnabled(this.lazyMintable, FEATURE_EDITION_LAZY_MINTABLE_V2).lazyMint.prepare(metadatas, options);\n  });\n\n  ////// ERC1155 Update Metadata Extension //////\n\n  /**\n   * Update the metadata of an NFT\n   *\n   * @remarks Update the metadata of an NFT in the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to update\n   * const tokenId = 0;\n   * // The updated metadata of the NFT\n   * const metadata = {\n   *   name: \"Updated NFT\",\n   *   description: \"This is an updated NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const result = await contract.erc1155.updateMetadata(tokenId, metadata);\n   * ```\n   * @twfeature ERC1155UpdateMetadata\n   */\n  updateMetadata = /* @__PURE__ */buildTransactionFunction(async (tokenId, metadata) => {\n    if (this.lazyMintable) {\n      return this.lazyMintable.updateMetadata.prepare(tokenId, metadata);\n    } else if (detectContractFeature(this.contractWrapper, \"ERC1155UpdatableMetadata\")) {\n      const uri = await this.storage.upload(metadata);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setTokenURI\",\n        args: [tokenId, uri]\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_EDITION_UPDATABLE_METADATA);\n    }\n  });\n\n  ////// ERC1155 Claimable Extension //////\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    if (claimWithConditions) {\n      return claimWithConditions.conditions.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }\n    if (claim) {\n      return claim.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_EDITION_CLAIM_CUSTOM);\n  }\n\n  /**\n   * Claim NFTs\n   *\n   * @remarks Let the connected wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claim(tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @returns  Receipt for the transaction\n   * @twfeature ERC1155ClaimCustom | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n   */\n  claim = /* @__PURE__ */buildTransactionFunction(async (tokenId, quantity, options) => {\n    return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), tokenId, quantity, options);\n  });\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @returns  Receipt for the transaction\n   * @twfeature ERC1155ClaimCustom | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    if (claimWithConditions) {\n      return claimWithConditions.to.prepare(destinationAddress, tokenId, quantity, options);\n    }\n    if (claim) {\n      return claim.to.prepare(destinationAddress, tokenId, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_EDITION_CLAIM_CUSTOM);\n  });\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc1155.claimConditions.set(tokenId, claimConditions);\n   * ```\n   * @twfeature ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n   */\n  get claimConditions() {\n    return assertEnabled(this.claimWithConditions, FEATURE_EDITION_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC1155 SignatureMintable Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc1155.signature.generate()` documentation\n   * const signedPayload = contract.erc1155.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @twfeature ERC1155SignatureMintable\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_EDITION_SIGNATURE_MINTABLE);\n  }\n\n  ////// ERC1155 DelayedReveal Extension //////\n\n  /**\n   * Mint delayed reveal NFTs\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.erc1155.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc1155.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @twfeature ERC1155Revealable\n   */\n  get revealer() {\n    return assertEnabled(this.lazyMintable?.revealer, FEATURE_EDITION_REVEALABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   * @param tokenId - the token Id to fetch\n   */\n  async getTokenMetadata(tokenId) {\n    const tokenUri = await this.contractWrapper.read(\"uri\", [tokenId]);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n  detectErc1155Enumerable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Enumerable\")) {\n      return new Erc1155Enumerable(this, this.contractWrapper);\n    }\n  }\n  detectErc1155Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Mintable\")) {\n      return new Erc1155Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Burnable\")) {\n      return new Erc1155Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155LazyMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155LazyMintableV1\") || detectContractFeature(this.contractWrapper, \"ERC1155LazyMintableV2\")) {\n      return new Erc1155LazyMintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155SignatureMintable\")) {\n      return new Erc1155SignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155Claimable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155ClaimCustom\")) {\n      return new ERC1155Claimable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155ClaimableWithConditions() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimPhasesV2\")) {\n      return new Erc1155ClaimableWithConditions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\nexport { DropErc1155ClaimConditions as D, Erc1155 as E, Erc1155SignatureMintable as a };\n"],"names":["DropErc1155ClaimConditions","constructor","contractWrapper","metadata","storage","this","getActive","tokenId","options","mc","get","transformResultToClaimCondition","getProvider","merkle","withAllowList","conditionId","isLegacySinglePhaseDrop","contractModel","read","legacyContractModelToAbstract","isLegacyMultiPhaseDrop","id","undefined","isNewSinglePhaseDrop","newContractModelToAbstract","isNewMultiphaseDrop","Error","getAll","claimCondition","startId","currentStartId","toNumber","count","conditions","i","push","Promise","all","map","c","canClaim","quantity","addressToCheck","resolveAddress","getClaimIneligibilityReasons","length","reasons","activeConditionIndex","getSignerAddress","err","ClaimEligibility","NoWallet","resolvedAddress","includesErrorMessage","NoClaimConditionSet","Unknown","availableSupply","BigNumber","from","lt","NotEnoughSupply","hasAllowList","utils.stripZeros","merkleRootHash","allowListEntry","getClaimerProofs","AddressNotAllowed","claimVerification","prepareClaim","validMerkleProof","proofs","maxClaimable","proof","maxQuantityInAllowlist","currencyAddress","price","quantityLimitPerWallet","currency","currencyAddressInProof","pricePerToken","priceInProof","e","reason","errorName","OverMaxClaimablePerWallet","WrongPriceOrCurrency","ClaimPhaseNotStarted","claimedSupply","convertQuantityToBigNumber","maxClaimablePerWallet","getSupplyClaimedByWallet","gt","add","lte","eq","lastClaimedTimestamp","timestampForNextClaim","now","Date","div","constants.MaxUint256","AlreadyClaimed","WaitBeforeNextClaimTransaction","isNode","claimerAddress","claimConditionId","merkleRoot","fetchSnapshotEntryForAddress","toString","getSnapshotFormatVersion","walletAddress","activeClaimConditionId","set","buildTransactionFunction","_this","async","claimConditionInputs","resetClaimEligibilityForAll","arguments","setBatch","prepare","claimConditions","_this2","claimConditionsForToken","merkleInfo","processedClaimConditions","_ref","claimConditionsProcessed","startTime","constants.AddressZero","maxClaimableSupply","waitInSeconds","utils.hexZeroPad","snapshot","forEach","cc","s","Number","reduce","acc","current","snapshotInfos","sortedConditions","processClaimConditionInputs","snapshotUri","encoded","key","Object","keys","deepEqual","mergedMetadata","parseInputMetadata","contractURI","_parseAndUploadMetadata","hasFunction","contractEncoder","ContractEncoder","encode","_ref2","baseContractEncoder","legacyContractEncoder","abstractContractModelToLegacy","abstractContractModelToNew","Transaction","fromContractWrapper","method","args","update","index","claimConditionInput","existingConditions","newConditionInputs","updateExistingClaimConditions","checkERC20Allowance","address","addressToClaim","getClaimArguments","destinationAddress","utils.toUtf8Bytes","getClaimTransaction","overrides","detectContractFeature","SnapshotFormatVersion","V1","V2","AirdropAddressInput","z","object","AddressOrEnsSchema","AmountSchema","default","AirdropInputSchema","union","array","string","transform","strings","parseAsync","ERC1155Claimable","featureName","FEATURE_EDITION_CLAIM_CUSTOM","name","calculateClaimCost","to","Erc1155ClaimableWithConditions","FEATURE_EDITION_CLAIM_CONDITIONS_V2","ContractMetadata","CustomContractSchema","Erc1155SignatureMintable","FEATURE_EDITION_SIGNATURE_MINTABLE","roles","mint","mintRequest","signedPayload","payload","signature","message","mapPayloadToContractStruct","getCallOverrides","setErc20Allowance","mul","parse","receipt","t","parseLogs","logs","tokenIdMinted","mintBatch","contractStructs","signedPayloads","contractPayloads","p","events","log","verify","generate","payloadToSign","generateFromTokenId","generateBatchFromTokenIds","generateBatch","payloadsToSign","payloads","signer","getSigner","invariant","getAddress","parsedRequests","m","Signature1155PayloadInputWithTokenId","metadatas","r","uris","chainId","contractInfo","uploadOrExtractURIs","getChainID","getPrebuiltInfo","finalPayloads","Signature1155PayloadOutput","uri","finalPayload","isLegacyContract","type","contractStruct","signTypedData","version","verifyingContract","MintRequest","MintRequest1155","normalizedPricePerToken","normalizePriceValue","validityStartTimestamp","mintStartTime","validityEndTimestamp","mintEndTime","uid","royaltyRecipient","royaltyBps","primarySaleRecipient","Erc1155Burnable","FEATURE_EDITION_BURNABLE","tokens","amount","account","batch","tokenIds","amounts","batchFrom","Erc1155Enumerable","FEATURE_EDITION_ENUMERABLE","erc1155","queryParams","start","DEFAULT_QUERY_ALL_COUNT","maxId","Math","min","totalCount","Array","totalCirculatingSupply","owned","ownedBalances","fill","b","balance","filter","slice","item","editionMetadata","owner","quantityOwned","Erc1155LazyMintable","FEATURE_EDITION_LAZY_MINTABLE_V2","revealer","detectErc1155Revealable","lazyMint","startFileNumber","nextTokenIdToMint","baseUri","substring","lastIndexOf","event","startingIndex","startTokenId","endingIndex","endTokenId","results","data","getTokenMetadata","prebuiltInfo","isLegacyEditionDropContract","endsWith","updateMetadata","batchCount","targetTokenId","batchIndex","range","sub","v","k","newMetadatas","rest","DelayedReveal","FEATURE_EDITION_REVEALABLE","info","Erc1155BatchMintable","FEATURE_EDITION_BATCH_MINTABLE","metadataWithSupply","a","supplies","supply","Erc1155Mintable","FEATURE_EDITION_MINTABLE","detectErc1155BatchMintable","tx","getMintTransaction","setParse","uploadOrExtractURI","additionalSupplyTo","additionalSupply","Erc1155","FEATURE_EDITION","_chainId","query","detectErc1155Enumerable","mintable","detectErc1155Mintable","burnable","detectErc1155Burnable","lazyMintable","detectErc1155LazyMintable","signatureMintable","detectErc1155SignatureMintable","claimCustom","detectErc1155Claimable","claimWithConditions","detectErc1155ClaimableWithConditions","onNetworkUpdated","network","updateSignerOrProvider","catch","FALLBACK_METADATA","totalSupply","ExtensionNotImplementedError","FEATURE_EDITION_SUPPLY","balanceOf","isApproved","operator","transfer","transferBatch","fromAddress","transferFrom","_this3","setApprovalForAll","approved","airdrop","_this4","addresses","input","totalToAirdrop","prev","curr","assertEnabled","getOwned","mintTo","receiver","mintAdditionalSupply","mintAdditionalSupplyTo","mintBatchTo","burn","burnFrom","burnBatch","burnBatchFrom","upload","FEATURE_EDITION_UPDATABLE_METADATA","claim","claimTo","tokenUri","NotFoundError","fetchTokenMetadata"],"mappings":"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","x_google_ignoreList":[0]}