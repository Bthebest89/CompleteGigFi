{"version":3,"file":"edition-drop-294e1578.browser.esm-BG75d8k7.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/edition-drop-294e1578.browser.esm.js"],"sourcesContent":["import { BigNumber, constants } from 'ethers';\nimport { dG as NFT_BASE_CONTRACT_ROLES, cs as ContractWrapper, bj as AbiSchema, bX as DropErc1155ContractSchema, H as getRoleHash } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, a as ContractEvents, G as GasCostEstimator } from './contract-appuri-5c40af52.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-49e75547.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-918c7cb8.browser.esm.js';\nimport { D as DropErc1155ClaimConditions } from './erc-1155-7ce9bee1.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-a5888d37.browser.esm.js';\nimport { P as PaperCheckout } from './thirdweb-checkout-f6974aaf.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport './QueryParams-32a56510.browser.esm.js';\nimport './signature-d3ea643d.browser.esm.js';\nimport './normalizePriceValue-9851c0eb.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-d1700f0b.browser.esm.js';\nimport 'uuid';\nimport 'fast-deep-equal';\n\n/**\n * Manages history for Edition Drop contracts\n * @public\n */\nclass DropErc1155History {\n  constructor(events) {\n    this.events = events;\n  }\n\n  /**\n   * Get all claimer addresses\n   *\n   * @remarks Get a list of all the addresses that have claimed a token\n   * @param tokenId - the tokenId of the NFT to get the addresses of*\n   * @returns  A unique list of addresses that claimed the token\n   * @example\n   * ```javascript\n   * const tokenId = \"0\";\n   * const allClaimerAddresses = await contract.history.getAllClaimerAddresses(tokenId);\n   * ```\n   */\n  async getAllClaimerAddresses(tokenId) {\n    const a = (await this.events.getEvents(\"TokensClaimed\")).filter(e => e.data && BigNumber.isBigNumber(e.data.tokenId) ? e.data.tokenId.eq(tokenId) : false);\n    return Array.from(new Set(a.filter(b => typeof b.data?.claimer === \"string\").map(b => b.data.claimer)));\n  }\n}\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition-drop\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc1155 instead\n */\nclass EditionDrop extends StandardErc1155 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, EditionDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new DropErc1155History(this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    return this.erc1155.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns The total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return this.erc1155.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns  Receipt for the transaction\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (destinationAddress, tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return _this.erc1155.claimTo.prepare(destinationAddress, tokenId, quantity, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns  Receipt for the transaction\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const address = await _this2.contractWrapper.getSignerAddress();\n      return _this2.claimTo.prepare(address, tokenId, quantity, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  burnTokens = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return this.erc1155.burn.prepare(tokenId, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { EditionDrop };\n"],"names":["DropErc1155History","constructor","events","this","getAllClaimerAddresses","tokenId","a","getEvents","filter","e","data","BigNumber","isBigNumber","eq","Array","from","Set","b","claimer","map","EditionDrop","StandardErc1155","static","NFT_BASE_CONTRACT_ROLES","network","address","storage","abi","arguments","length","undefined","chainId","super","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","contractWrapper","DropErc1155ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","claimConditions","DropErc1155ClaimConditions","ContractEvents","history","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","checkout","PaperCheckout","owner","ContractOwner","onNetworkUpdated","updateSignerOrProvider","getAddress","getAll","queryParams","erc1155","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","read","getRoleHash","constants.AddressZero","createBatch","buildTransactionFunction","async","metadatas","options","lazyMint","prepare","getClaimTransaction","destinationAddress","quantity","checkERC20Allowance","claimTo","_this","claim","_this2","getSignerAddress","burnTokens","amount","burn","method","args","overrides","Transaction","fromContractWrapper","call","functionName"],"mappings":"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","x_google_ignoreList":[0]}