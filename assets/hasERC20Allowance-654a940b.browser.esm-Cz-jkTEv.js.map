{"version":3,"mappings":";sFAKAA,eAAeC,EAAkBC,EAAmBC,EAAiBC,GACnE,MAAMC,EAAWH,EAAkBI,cAC7BC,6CAAkBC,OAAO,uBAAkDC,MAAAC,KAAAC,KAAA,OAAAC,QAAAC,EAAA,GAAAC,+BAAGF,QAC9EG,EAAQ,IAAIC,EAAgBX,EAAUF,EAAiBI,EAAU,GAAIL,EAAkBe,SACvFC,QAAchB,EAAkBiB,mBAChCC,EAAUlB,EAAkBmB,QAElC,aADwBN,EAAMO,KAAK,YAAa,CAACJ,EAAOE,KACvCG,IAAInB,EACvB","names":["async","hasERC20Allowance","contractToApprove","currencyAddress","value","provider","getProvider","ERC20Abi","import","then","n","dV","default","__vite_default__","__VITE_PRELOAD__","erc20","ContractWrapper","storage","owner","getSignerAddress","spender","address","read","gte"],"ignoreList":[0],"sources":["../../node_modules/@thirdweb-dev/sdk/dist/hasERC20Allowance-654a940b.browser.esm.js"],"sourcesContent":["import { cs as ContractWrapper } from './index-33cd3415.browser.esm.js';\n\n/**\n * @internal\n */\nasync function hasERC20Allowance(contractToApprove, currencyAddress, value) {\n  const provider = contractToApprove.getProvider();\n  const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n  const erc20 = new ContractWrapper(provider, currencyAddress, ERC20Abi, {}, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  return allowance.gte(value);\n}\n\nexport { hasERC20Allowance as h };\n"],"file":"assets/hasERC20Allowance-654a940b.browser.esm-Cz-jkTEv.js"}